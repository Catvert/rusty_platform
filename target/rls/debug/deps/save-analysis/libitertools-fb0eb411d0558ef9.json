{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"itertools","disambiguator":[5088712081513276080,6366650629155090018]},"crate_root":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src","external_crates":[{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[12032660577259018450,5860902972173545957]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17283673789807926844,10899266201186168850]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","num":3,"id":{"name":"either","disambiguator":[16822363354479097394,967057274073624347]}}],"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":70470,"line_start":1,"line_end":2121,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":3,"index":138},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":825,"byte_end":831,"line_start":32,"line_end":32,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":3690},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1164,"byte_end":1168,"line_start":49,"line_end":49,"column_start":14,"column_end":18},"alias_span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1172,"byte_end":1182,"line_start":49,"line_end":49,"column_start":22,"column_end":32},"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":314},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1268,"byte_end":1273,"line_start":54,"line_end":54,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1004},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1283,"byte_end":1293,"line_start":55,"line_end":55,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1014},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1303,"byte_end":1321,"line_start":56,"line_end":56,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1034},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1331,"byte_end":1338,"line_start":57,"line_end":57,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1024},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1348,"byte_end":1355,"line_start":58,"line_end":58,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1044},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1365,"byte_end":1373,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1052},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1383,"byte_end":1387,"line_start":60,"line_end":60,"column_start":9,"column_end":13},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1397,"byte_end":1407,"line_start":61,"line_end":61,"column_start":9,"column_end":19},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1417,"byte_end":1422,"line_start":62,"line_end":62,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1432,"byte_end":1439,"line_start":63,"line_end":63,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1449,"byte_end":1461,"line_start":64,"line_end":64,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1082},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1471,"byte_end":1480,"line_start":65,"line_end":65,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1490,"byte_end":1498,"line_start":66,"line_end":66,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1092},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1508,"byte_end":1525,"line_start":67,"line_end":67,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1176},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1535,"byte_end":1542,"line_start":68,"line_end":68,"column_start":9,"column_end":16},"alias_span":null,"name":"Flatten","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1552,"byte_end":1561,"line_start":69,"line_end":69,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":428},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1571,"byte_end":1577,"line_start":70,"line_end":70,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1290},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1756,"byte_end":1766,"line_start":76,"line_end":76,"column_start":31,"column_end":41},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1296},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1789,"byte_end":1795,"line_start":77,"line_end":77,"column_start":22,"column_end":28},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":528},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1797,"byte_end":1807,"line_start":77,"line_end":77,"column_start":30,"column_end":40},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1338},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1945,"byte_end":1956,"line_start":80,"line_end":80,"column_start":26,"column_end":37},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":578},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2059,"byte_end":2070,"line_start":83,"line_end":83,"column_start":25,"column_end":36},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1368},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2165,"byte_end":2173,"line_start":86,"line_end":86,"column_start":23,"column_end":31},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":638},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2207,"byte_end":2223,"line_start":87,"line_end":87,"column_start":33,"column_end":49},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1406},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2259,"byte_end":2273,"line_start":88,"line_end":88,"column_start":35,"column_end":49},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2432,"byte_end":2439,"line_start":93,"line_end":93,"column_start":22,"column_end":29},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":710},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2463,"byte_end":2473,"line_start":94,"line_end":94,"column_start":23,"column_end":33},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1422},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2475,"byte_end":2481,"line_start":94,"line_end":94,"column_start":35,"column_end":41},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1428},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2483,"byte_end":2490,"line_start":94,"line_end":94,"column_start":43,"column_end":50},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1436},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2572,"byte_end":2583,"line_start":97,"line_end":97,"column_start":26,"column_end":37},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1442},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2585,"byte_end":2597,"line_start":97,"line_end":97,"column_start":39,"column_end":51},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2599,"byte_end":2605,"line_start":97,"line_end":97,"column_start":53,"column_end":59},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":814},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2712,"byte_end":2724,"line_start":100,"line_end":100,"column_start":28,"column_end":40},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1530},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2751,"byte_end":2756,"line_start":101,"line_end":101,"column_start":26,"column_end":31},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1540},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2783,"byte_end":2793,"line_start":102,"line_end":102,"column_start":26,"column_end":36},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2817,"byte_end":2820,"line_start":103,"line_end":103,"column_start":23,"column_end":26},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":28}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2841,"byte_end":2842,"line_start":105,"line_end":105,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"Dedup, TupleWindows, Format, Flatten, WhileSome, Merge, ZipEq, Batching, InterleaveShortest, Update, TupleCombinations, TakeWhileRef, PadUsing, MapResults, ZipLongest, PutBack, Interleave, Intersperse, Tuples, FormatWith, Positions, Coalesce, PeekingTakeWhile, MergeBy, MergeJoinBy, Step, Product, WithPosition","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2862,"byte_end":2869,"line_start":106,"line_end":106,"column_start":19,"column_end":26},"alias_span":null,"name":"flatten","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2892,"byte_end":2898,"line_start":107,"line_end":107,"column_start":22,"column_end":28},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":510},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2926,"byte_end":2937,"line_start":108,"line_end":108,"column_start":27,"column_end":38},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":520},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2953,"byte_end":2962,"line_start":109,"line_end":109,"column_start":15,"column_end":24},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":518},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2978,"byte_end":2982,"line_start":110,"line_end":110,"column_start":15,"column_end":19},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3062,"byte_end":3074,"line_start":113,"line_end":113,"column_start":17,"column_end":29},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3104,"byte_end":3115,"line_start":114,"line_end":114,"column_start":29,"column_end":40},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":662},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3147,"byte_end":3162,"line_start":115,"line_end":115,"column_start":31,"column_end":46},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":666},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3181,"byte_end":3189,"line_start":116,"line_end":116,"column_start":18,"column_end":26},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3209,"byte_end":3220,"line_start":117,"line_end":117,"column_start":19,"column_end":30},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3222,"byte_end":3228,"line_start":117,"line_end":117,"column_start":32,"column_end":38},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3230,"byte_end":3237,"line_start":117,"line_end":117,"column_start":40,"column_end":47},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1512},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3263,"byte_end":3271,"line_start":118,"line_end":118,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":884},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3291,"byte_end":3299,"line_start":119,"line_end":119,"column_start":19,"column_end":27},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1186},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3359,"byte_end":3371,"line_start":122,"line_end":122,"column_start":25,"column_end":37},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111320,"byte_end":111330,"line_start":13,"line_end":13,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":454}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111336,"byte_end":111341,"line_start":14,"line_end":14,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":454}},{"kind":"Use","ref_id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111347,"byte_end":111355,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":454}},{"kind":"Use","ref_id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111566,"byte_end":111572,"line_start":23,"line_end":23,"column_start":22,"column_end":28},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":454}},{"kind":"Use","ref_id":{"krate":0,"index":576},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111594,"byte_end":111607,"line_start":24,"line_end":24,"column_start":21,"column_end":34},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":454}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3431,"byte_end":3432,"line_start":126,"line_end":126,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"zip_eq, merge_join_by, interleave, fold, merge","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":70470,"line_start":1,"line_end":2121,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":502},{"krate":0,"index":512},{"krate":0,"index":522},{"krate":0,"index":544},{"krate":0,"index":560},{"krate":0,"index":590},{"krate":0,"index":598},{"krate":0,"index":620},{"krate":0,"index":652},{"krate":0,"index":664},{"krate":0,"index":682},{"krate":0,"index":704},{"krate":0,"index":748},{"krate":0,"index":806},{"krate":0,"index":832},{"krate":0,"index":848},{"krate":0,"index":880},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":1672},{"krate":0,"index":1682},{"krate":0,"index":1678},{"krate":0,"index":1674},{"krate":0,"index":998}],"decl_id":null,"docs":" Itertools — extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":88,"byte_end":95,"line_start":3,"line_end":3,"column_start":39,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1226,"byte_end":1233,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":94},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1004},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":71882,"byte_end":71892,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":897},{"krate":0,"index":899},{"krate":0,"index":901}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":71797,"byte_end":71870,"line_start":35,"line_end":35,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":72222,"byte_end":72232,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"fn <I, J> (i: I, j: J) -> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73497,"byte_end":73515,"line_start":99,"line_end":99,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":915},{"krate":0,"index":917},{"krate":0,"index":919}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73412,"byte_end":73485,"line_start":98,"line_end":98,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1024},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":75917,"byte_end":75924,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":933}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76061,"byte_end":76069,"line_start":196,"line_end":196,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"fn <I> (iterable: I) -> PutBack<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76318,"byte_end":76328,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"fn (mut self, value: I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76484,"byte_end":76494,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"fn (self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76463,"byte_end":76472,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76759,"byte_end":76767,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"fn (&mut self, x: I::Item) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76738,"byte_end":76747,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1034},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78228,"byte_end":78235,"line_start":277,"line_end":277,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":947},{"krate":0,"index":949}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78143,"byte_end":78216,"line_start":276,"line_end":276,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1044},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81074,"byte_end":81082,"line_start":373,"line_end":373,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":965}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":80989,"byte_end":81062,"line_start":372,"line_end":372,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1052},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82123,"byte_end":82127,"line_start":413,"line_end":413,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":975}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82038,"byte_end":82111,"line_start":412,"line_end":412,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84875,"byte_end":84880,"line_start":527,"line_end":527,"column_start":12,"column_end":17},"name":"Merge","qualname":"::adaptors::Merge","value":"Merge {  }","parent":null,"children":[{"krate":0,"index":111}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":84790,"byte_end":84863,"line_start":526,"line_end":526,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85668,"byte_end":85673,"line_start":563,"line_end":563,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"fn <I, J> (i: I, j: J) -> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86746,"byte_end":86753,"line_start":600,"line_end":600,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":139}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86661,"byte_end":86734,"line_start":599,"line_end":599,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89304,"byte_end":89312,"line_start":701,"line_end":701,"column_start":12,"column_end":20},"name":"Coalesce","qualname":"::adaptors::Coalesce","value":"Coalesce {  }","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":175}],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89219,"byte_end":89292,"line_start":700,"line_end":700,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":314},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90543,"byte_end":90548,"line_start":756,"line_end":756,"column_start":12,"column_end":17},"name":"Dedup","qualname":"::adaptors::Dedup","value":"Dedup {  }","parent":null,"children":[{"krate":0,"index":195}],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90458,"byte_end":90531,"line_start":755,"line_end":755,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92259,"byte_end":92271,"line_start":829,"line_end":829,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":221}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92174,"byte_end":92247,"line_start":828,"line_end":828,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1082},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93644,"byte_end":93653,"line_start":880,"line_end":880,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":993}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93559,"byte_end":93632,"line_start":879,"line_end":879,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1092},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94504,"byte_end":94521,"line_start":914,"line_end":914,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1005},{"krate":0,"index":1007}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94419,"byte_end":94492,"line_start":913,"line_end":913,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94672,"byte_end":94686,"line_start":923,"line_end":923,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":360}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94708,"byte_end":94719,"line_start":924,"line_end":924,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1098},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95340,"byte_end":95357,"line_start":952,"line_end":952,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":1015}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1176},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98051,"byte_end":98058,"line_start":1043,"line_end":1043,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::adaptors::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1103}],"decl_id":null,"docs":" An iterator adapter to simply flatten a structure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":97966,"byte_end":98039,"line_start":1042,"line_end":1042,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":386},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98643,"byte_end":98650,"line_start":1066,"line_end":1066,"column_start":8,"column_end":15},"name":"flatten","qualname":"::adaptors::flatten","value":"fn <I, J> (iterable: I) -> Flatten<I::IntoIter, J>","parent":null,"children":[],"decl_id":null,"docs":" Flatten an iterable of iterables into a single combined sequence of all\n the elements in the iterables.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100173,"byte_end":100183,"line_start":1117,"line_end":1117,"column_start":12,"column_end":22},"name":"MapResults","qualname":"::adaptors::MapResults","value":"MapResults {  }","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":283}],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100088,"byte_end":100161,"line_start":1116,"line_end":1116,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":412},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101474,"byte_end":101483,"line_start":1166,"line_end":1166,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":325}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101389,"byte_end":101462,"line_start":1165,"line_end":1165,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":428},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102899,"byte_end":102905,"line_start":1224,"line_end":1224,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":345}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102814,"byte_end":102887,"line_start":1223,"line_end":1223,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1117},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110811,"byte_end":110815,"line_start":5,"line_end":5,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":1186},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1123},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110879,"byte_end":110883,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":1186},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1127},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110945,"byte_end":110950,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":1186},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1186},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110753,"byte_end":110765,"line_start":3,"line_end":3,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"EitherOrBoth::{Both, Left, Right}","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1123},{"krate":0,"index":1127}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,101,105,116,104,101,114,95,111,114,95,98,111,116,104,46,114,115],"byte_start":110744,"byte_end":110956,"line_start":3,"line_end":10,"column_start":1,"column_end":2}}]},{"kind":"Mod","id":{"krate":0,"index":454},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.7.8/src/free.rs","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":462},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":474},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":111905,"byte_end":111914,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"fn <I> (iterable: I) -> iter::Enumerate<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":476},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":112236,"byte_end":112239,"line_start":56,"line_end":56,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"fn <I> (iterable: I) -> iter::Rev<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":478},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":112640,"byte_end":112643,"line_start":75,"line_end":75,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"fn <I, J> (i: I, j: J) -> Zip<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":480},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":113023,"byte_end":113028,"line_start":93,"line_end":93,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"fn <I, J> (i: I, j: J) -> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that first iterates `i` and then `j`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":482},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":113451,"byte_end":113457,"line_start":109,"line_end":109,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"fn <'a, I, T> (iterable: I) -> iter::Cloned<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":484},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":113845,"byte_end":113849,"line_start":125,"line_end":125,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"fn <I, B, F> (iterable: I, init: B, f: F) -> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":486},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":114224,"byte_end":114227,"line_start":141,"line_end":141,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":114587,"byte_end":114590,"line_start":157,"line_end":157,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"fn <I, F> (iterable: I, f: F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":114915,"byte_end":114918,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,114,101,101,46,114,115],"byte_start":115231,"byte_end":115234,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"fn <I> (iterable: I) -> Option<I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,99,97,116,95,105,109,112,108,46,114,115],"byte_start":116715,"byte_end":116721,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"fn <I> (iterable: I) -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1290},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118497,"byte_end":118507,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":1367}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118395,"byte_end":118468,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118848,"byte_end":118859,"line_start":64,"line_end":64,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"fn <I, J> (iterable: I) -> ConsTuples<I, J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":427},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":119791,"byte_end":119804,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":435},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":119937,"byte_end":119944,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":441},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":120065,"byte_end":120071,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":518},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":518},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":119588,"byte_end":119592,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"Diff::{FirstMismatch, Shorter, Longer}","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":435},{"krate":0,"index":441}],"decl_id":null,"docs":" A type returned by the [`diff_with`](./fn.diff_with.html) function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":520},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,100,105,102,102,46,114,115],"byte_start":120820,"byte_end":120829,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"fn <I, J, F> (i: I, j: J, is_equal: F) -> Option<Diff<I::IntoIter, J::IntoIter>>","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a `Diff` which describes how `j` differs from `i`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":528},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":121949,"byte_end":121959,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":463}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1296},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":122382,"byte_end":122388,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1379}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1338},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":125390,"byte_end":125401,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"Intersperse {  }","parent":null,"children":[{"krate":0,"index":1427},{"krate":0,"index":1429},{"krate":0,"index":1431}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":125288,"byte_end":125361,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":576},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":126789,"byte_end":126802,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"fn <I, J, F> (left: I, right: J, cmp_fn: F) -> MergeJoinBy<I::IntoIter, J::IntoIter, F>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":578},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":127428,"byte_end":127439,"line_start":28,"line_end":28,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":507}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":127343,"byte_end":127416,"line_start":27,"line_end":27,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1439},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":129448,"byte_end":129458,"line_start":7,"line_end":7,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1441},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":129540,"byte_end":129550,"line_start":10,"line_end":10,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1445},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":129663,"byte_end":129669,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":1350},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1350},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":129403,"byte_end":129415,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"MinMaxResult::{NoElements, OneElement, MinMax}","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1445}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\n more detail.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":129394,"byte_end":129677,"line_start":5,"line_end":15,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":130487,"byte_end":130498,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"fn (self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1368},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":133497,"byte_end":133505,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":133412,"byte_end":133485,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":135703,"byte_end":135714,"line_start":15,"line_end":15,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":628}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":135898,"byte_end":135910,"line_start":19,"line_end":19,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"fn <F> (&mut self, accept: F) -> Option<Self::Item>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":638},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":137429,"byte_end":137445,"line_start":80,"line_end":80,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":565}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":137344,"byte_end":137417,"line_start":79,"line_end":79,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1406},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":139931,"byte_end":139945,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1521}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":139829,"byte_end":139902,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":662},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":141850,"byte_end":141865,"line_start":71,"line_end":71,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"fn <I, F, T, E, R> (iterable: I, processor: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1412},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":142431,"byte_end":142438,"line_start":7,"line_end":7,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1533}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":142337,"byte_end":142402,"line_start":5,"line_end":5,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":666},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":142555,"byte_end":142563,"line_start":13,"line_end":13,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"fn <A> (element: A, n: usize) -> RepeatN<A>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":710},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":146174,"byte_end":146184,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":613}],"decl_id":null,"docs":" See [`repeat_call`](../fn.repeat_call.html) for more information.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":146876,"byte_end":146887,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"fn <F, A> (function: F) -> RepeatCall<F>","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":148494,"byte_end":148500,"line_start":97,"line_end":97,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"fn <A, St, F> (initial_state: St, f: F) -> Unfold<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1422},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":148926,"byte_end":148932,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":1541},{"krate":0,"index":1543}],"decl_id":null,"docs":" See [`unfold`](../fn.unfold.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":148849,"byte_end":148914,"line_start":114,"line_end":114,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1543},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149040,"byte_end":149045,"line_start":118,"line_end":118,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":1422},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1428},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149705,"byte_end":149712,"line_start":145,"line_end":145,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1555}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149628,"byte_end":149693,"line_start":144,"line_end":144,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":150469,"byte_end":150476,"line_start":180,"line_end":180,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"fn <St, F> (initial_value: St, f: F) -> Iterate<St, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1436},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":150896,"byte_end":150907,"line_start":10,"line_end":10,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":1563},{"krate":0,"index":1565}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":152133,"byte_end":152139,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":667}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":152048,"byte_end":152121,"line_start":64,"line_end":64,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":153178,"byte_end":153189,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"fn (self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1442},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":153553,"byte_end":153565,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1575}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":153451,"byte_end":153524,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":790},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":154862,"byte_end":154874,"line_start":174,"line_end":174,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":792},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":154893,"byte_end":154897,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":794},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":154908,"byte_end":154914,"line_start":176,"line_end":176,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":154993,"byte_end":155010,"line_start":178,"line_end":178,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"fn <I> (iter: I, buf: &mut Self::Buffer) -> Option<Self>","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":155121,"byte_end":155145,"line_start":181,"line_end":181,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"fn <I> (iter: I) -> Option<Self>","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":155232,"byte_end":155241,"line_start":184,"line_end":184,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"fn () -> usize","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":802},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":155262,"byte_end":155277,"line_start":186,"line_end":186,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"fn (&mut self, item: Self::Item) -> ()","parent":{"krate":0,"index":790},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":814},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158009,"byte_end":158021,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":697}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`](../enum.Position.html).","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":157924,"byte_end":157997,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1615},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158638,"byte_end":158643,"line_start":33,"line_end":33,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":1512},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1619},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158708,"byte_end":158714,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":1512},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1623},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158757,"byte_end":158761,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":1512},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1627},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158804,"byte_end":158808,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":1512},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1512},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158585,"byte_end":158593,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"Position::{First, Middle, Last, Only}","parent":null,"children":[{"krate":0,"index":1615},{"krate":0,"index":1619},{"krate":0,"index":1623},{"krate":0,"index":1627}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158576,"byte_end":158814,"line_start":31,"line_end":40,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158881,"byte_end":158891,"line_start":44,"line_end":44,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1530},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":160697,"byte_end":160702,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1645}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":160612,"byte_end":160685,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":161077,"byte_end":161083,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"fn <I, J> (i: I, j: J) -> ZipEq<I::IntoIter, J::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1540},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":162508,"byte_end":162518,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":1659},{"krate":0,"index":1661}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":162423,"byte_end":162496,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":164542,"byte_end":164545,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":1673}],"decl_id":null,"docs":" See [`multizip`](../fn.multizip.html) for more information.\n","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":164457,"byte_end":164530,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":884},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,116,117,112,108,101,46,114,115],"byte_start":165709,"byte_end":165717,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"fn <T, U> (t: U) -> Zip<T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":892},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8105,"byte_end":8114,"line_start":283,"line_end":283,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":924},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":988}],"decl_id":null,"docs":" The trait `Itertools`: extra iterator adaptors and methods for iterators.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8513,"byte_end":8523,"line_start":298,"line_end":298,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"fn <J> (self, other: J) -> Interleave<Self, J::IntoIter>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9046,"byte_end":9065,"line_start":316,"line_end":316,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"fn <J> (self, other: J) -> InterleaveShortest<Self, J::IntoIter>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9644,"byte_end":9655,"line_start":335,"line_end":335,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"fn (self, element: Self::Item) -> Intersperse<Self>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10898,"byte_end":10909,"line_start":369,"line_end":369,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"fn <J> (self, other: J) -> ZipLongest<Self, J::IntoIter>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10881,"byte_end":10890,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11347,"byte_end":11353,"line_start":382,"line_end":382,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"fn <J> (self, other: J) -> ZipEq<Self, J::IntoIter>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11330,"byte_end":11339,"line_start":381,"line_end":381,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12268,"byte_end":12276,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"fn <B, F> (self, f: F) -> Batching<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure recives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16556,"byte_end":16569,"line_start":527,"line_end":527,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"fn <T> (self) -> TupleWindows<Self, T>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17878,"byte_end":17884,"line_start":566,"line_end":566,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"fn <T> (self) -> Tuples<Self, T>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19334,"byte_end":19338,"line_start":614,"line_end":614,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"fn (self, n: usize) -> Step<Self>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19855,"byte_end":19866,"line_start":631,"line_end":631,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"fn <F, T, U, E> (self, f: F) -> MapResults<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20529,"byte_end":20534,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"fn <J> (self, other: J) -> Merge<Self, J::IntoIter>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21311,"byte_end":21319,"line_start":676,"line_end":676,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"fn <J, F> (self, other: J, is_first: F) -> MergeBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like `.merge()` but allows for a custom ordering.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22909,"byte_end":22922,"line_start":716,"line_end":716,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"fn <J, F> (self, other: J, cmp_fn: F) -> MergeJoinBy<Self, J::IntoIter, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22892,"byte_end":22901,"line_start":715,"line_end":715,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25528,"byte_end":25545,"line_start":792,"line_end":792,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"fn <J> (self, other: J) -> Product<Self, J::IntoIter>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28516,"byte_end":28524,"line_start":864,"line_end":864,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"fn <F> (self, f: F) -> Coalesce<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29238,"byte_end":29243,"line_start":886,"line_end":886,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"fn (self) -> Dedup<Self>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31443,"byte_end":31461,"line_start":950,"line_end":950,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"fn <F> (&mut self, accept: F) -> PeekingTakeWhile<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32407,"byte_end":32421,"line_start":975,"line_end":975,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"fn <F> (&mut self, accept: F) -> TakeWhileRef<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33087,"byte_end":33097,"line_start":996,"line_end":996,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"fn <A> (self) -> WhileSome<Self>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34528,"byte_end":34546,"line_start":1035,"line_end":1035,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"fn <T> (self) -> TupleCombinations<Self, T>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36194,"byte_end":36203,"line_start":1085,"line_end":1085,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"fn <F> (self, min: usize, f: F) -> PadUsing<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36925,"byte_end":36932,"line_start":1108,"line_end":1108,"column_start":8,"column_end":15},"name":"flatten","qualname":"::Itertools::flatten","value":"fn (self) -> Flatten<Self, <Self::Item as IntoIterator>::IntoIter>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Flatten an iterator of iterables into a single combined sequence of all\n the elements in the iterables.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37857,"byte_end":37870,"line_start":1134,"line_end":1134,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"fn (self) -> WithPosition<Self>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":38549,"byte_end":38558,"line_start":1153,"line_end":1153,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"fn <P> (self, predicate: P) -> Positions<Self, P>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39111,"byte_end":39117,"line_start":1170,"line_end":1170,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"fn <F> (self, updater: F) -> Update<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39742,"byte_end":39752,"line_start":1191,"line_end":1191,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"fn <T> (&mut self) -> Option<T>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40494,"byte_end":40507,"line_start":1216,"line_end":1216,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"fn <T> (mut self) -> Option<T>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 4).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41188,"byte_end":41201,"line_start":1240,"line_end":1240,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"fn <P> (&mut self, mut pred: P) -> Option<(usize, Self::Item)>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42050,"byte_end":42059,"line_start":1269,"line_end":1269,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"fn (&mut self) -> bool","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42739,"byte_end":42747,"line_start":1290,"line_end":1290,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43440,"byte_end":43453,"line_start":1314,"line_end":1314,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"fn (mut self, n: usize) -> Self","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44176,"byte_end":44183,"line_start":1341,"line_end":1341,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"fn <F> (self, mut f: F) -> ()","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44846,"byte_end":44852,"line_start":1361,"line_end":1361,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"fn (self) -> Self::Item","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using `Extend`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45808,"byte_end":45816,"line_start":1393,"line_end":1393,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"fn <'a, A, J> (&mut self, from: J) -> usize","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":45791,"byte_end":45800,"line_start":1392,"line_end":1392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47692,"byte_end":47698,"line_start":1453,"line_end":1453,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"fn (self, sep: &str) -> Format<Self>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":49176,"byte_end":49187,"line_start":1491,"line_end":1491,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"fn <F> (self, sep: &str, format: F) -> FormatWith<Self, F>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":50908,"byte_end":50920,"line_start":1540,"line_end":1540,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"fn <A, E, B, F> (&mut self, mut start: B, mut f: F) -> Result<B, E>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52077,"byte_end":52089,"line_start":1572,"line_end":1572,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"fn <A, B, F> (&mut self, mut start: B, mut f: F) -> Option<B>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":52889,"byte_end":52894,"line_start":1597,"line_end":1597,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"fn <F> (mut self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":54958,"byte_end":54968,"line_start":1653,"line_end":1653,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"fn <F> (mut self, mut f: F) -> Option<Self::Item>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":58464,"byte_end":58474,"line_start":1751,"line_end":1751,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"fn <B, F> (&mut self, init: B, mut f: F) -> FoldWhile<B>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":62268,"byte_end":62281,"line_start":1870,"line_end":1870,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"fn <A, B, F, L, R> (self, predicate: F) -> (A, B)","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike `Iterator::partition`, each partition may\n have a distinct type.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":64868,"byte_end":64874,"line_start":1946,"line_end":1946,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"fn (self) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":65570,"byte_end":65583,"line_start":1963,"line_end":1963,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"fn <K, F> (self, key: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66221,"byte_end":66230,"line_start":1977,"line_end":1977,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"fn <F> (self, mut compare: F) -> MinMaxResult<Self::Item>","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":992},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66959,"byte_end":66964,"line_start":2001,"line_end":2001,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"fn <I, J> (a: I, b: J) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":994},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":67784,"byte_end":67796,"line_start":2029,"line_end":2029,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"fn <I, J> (a: I, b: J) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as *equal(a, b)*.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":996},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69023,"byte_end":69032,"line_start":2071,"line_end":2071,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"fn <'a, A, I, F> (iter: I, mut pred: F) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1897},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69953,"byte_end":69961,"line_start":2101,"line_end":2101,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":1672},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1901},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70022,"byte_end":70026,"line_start":2103,"line_end":2103,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":1672},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1672},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69893,"byte_end":69902,"line_start":2099,"line_end":2099,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"FoldWhile::{Continue, Done}","parent":null,"children":[{"krate":0,"index":1897},{"krate":0,"index":1901}],"decl_id":null,"docs":" An enum used for controlling the execution of `.fold_while()`.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":69884,"byte_end":70032,"line_start":2099,"line_end":2104,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70118,"byte_end":70128,"line_start":2108,"line_end":2108,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70321,"byte_end":70328,"line_start":2115,"line_end":2115,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":72535,"byte_end":72545,"line_start":64,"line_end":64,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73956,"byte_end":73974,"line_start":120,"line_end":120,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76224,"byte_end":76231,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76850,"byte_end":76857,"line_start":230,"line_end":230,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78704,"byte_end":78711,"line_start":303,"line_end":303,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81143,"byte_end":81151,"line_start":378,"line_end":378,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81379,"byte_end":81387,"line_start":387,"line_end":387,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82427,"byte_end":82431,"line_start":431,"line_end":431,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83029,"byte_end":83033,"line_start":458,"line_end":458,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83249,"byte_end":83258,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83490,"byte_end":83499,"line_start":484,"line_end":484,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85002,"byte_end":85007,"line_start":534,"line_end":534,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85244,"byte_end":85249,"line_start":545,"line_end":545,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86055,"byte_end":86060,"line_start":577,"line_end":577,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86898,"byte_end":86905,"line_start":608,"line_end":608,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87430,"byte_end":87437,"line_start":630,"line_end":630,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87705,"byte_end":87712,"line_start":642,"line_end":642,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":88172,"byte_end":88184,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89418,"byte_end":89426,"line_start":708,"line_end":708,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89595,"byte_end":89603,"line_start":717,"line_end":717,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1076}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89990,"byte_end":89998,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90631,"byte_end":90636,"line_start":762,"line_end":762,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91000,"byte_end":91005,"line_start":783,"line_end":783,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91138,"byte_end":91143,"line_start":790,"line_end":790,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92352,"byte_end":92364,"line_start":834,"line_end":834,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92701,"byte_end":92713,"line_start":847,"line_end":847,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93812,"byte_end":93821,"line_start":889,"line_end":889,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95130,"byte_end":95147,"line_start":940,"line_end":940,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95399,"byte_end":95416,"line_start":956,"line_end":956,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95534,"byte_end":95551,"line_start":962,"line_end":962,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98912,"byte_end":98919,"line_start":1077,"line_end":1077,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100493,"byte_end":100503,"line_start":1133,"line_end":1133,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101794,"byte_end":101803,"line_start":1184,"line_end":1184,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102292,"byte_end":102301,"line_start":1206,"line_end":1206,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":103139,"byte_end":103145,"line_start":1238,"line_end":1238,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104011,"byte_end":104017,"line_start":1274,"line_end":1274,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104123,"byte_end":104129,"line_start":1280,"line_end":1280,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118584,"byte_end":118594,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":123040,"byte_end":123050,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":123799,"byte_end":123805,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":125774,"byte_end":125785,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":127574,"byte_end":127585,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":127810,"byte_end":127821,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":129694,"byte_end":129706,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":133891,"byte_end":133899,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":134662,"byte_end":134670,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":135127,"byte_end":135135,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":136031,"byte_end":136039,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":136359,"byte_end":136366,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":137746,"byte_end":137762,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":138850,"byte_end":138854,"line_start":135,"line_end":135,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":138906,"byte_end":138911,"line_start":136,"line_end":136,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":138960,"byte_end":138971,"line_start":137,"line_end":137,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139020,"byte_end":139025,"line_start":138,"line_end":138,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139080,"byte_end":139084,"line_start":139,"line_end":139,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139142,"byte_end":139146,"line_start":140,"line_end":140,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139198,"byte_end":139203,"line_start":141,"line_end":141,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139612,"byte_end":139615,"line_start":149,"line_end":149,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":140043,"byte_end":140057,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":142767,"byte_end":142774,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":143164,"byte_end":143171,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":143321,"byte_end":143328,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":146226,"byte_end":146236,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":147010,"byte_end":147020,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":148689,"byte_end":148695,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149082,"byte_end":149088,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149777,"byte_end":149784,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149887,"byte_end":149894,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":150986,"byte_end":150997,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":151170,"byte_end":151181,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":151847,"byte_end":151858,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":152507,"byte_end":152513,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":152725,"byte_end":152731,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":154338,"byte_end":154350,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158824,"byte_end":158832,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":159111,"byte_end":159123,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":160359,"byte_end":160371,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":161289,"byte_end":161294,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":161872,"byte_end":161877,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":162799,"byte_end":162809,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":163431,"byte_end":163441,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":876}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":164262,"byte_end":164272,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66537,"byte_end":66538,"line_start":1988,"line_end":1988,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70042,"byte_end":70051,"line_start":2106,"line_end":2106,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3396,"byte_end":3400,"line_start":124,"line_end":124,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":454}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":72535,"byte_end":72545,"line_start":64,"line_end":64,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1004},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":73956,"byte_end":73974,"line_start":120,"line_end":120,"column_start":25,"column_end":43},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1014},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76224,"byte_end":76231,"line_start":205,"line_end":205,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1024},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":76850,"byte_end":76857,"line_start":230,"line_end":230,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1024},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":78704,"byte_end":78711,"line_start":303,"line_end":303,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1034},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81143,"byte_end":81151,"line_start":378,"line_end":378,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":81379,"byte_end":81387,"line_start":387,"line_end":387,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1044},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":82427,"byte_end":82431,"line_start":431,"line_end":431,"column_start":22,"column_end":26},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1052},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83029,"byte_end":83033,"line_start":458,"line_end":458,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1052},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83249,"byte_end":83258,"line_start":473,"line_end":473,"column_start":22,"column_end":31},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":242},"to":{"krate":1,"index":2564}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":83490,"byte_end":83499,"line_start":484,"line_end":484,"column_start":12,"column_end":21},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85002,"byte_end":85007,"line_start":534,"line_end":534,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":254},"to":{"krate":1,"index":2564}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":85244,"byte_end":85249,"line_start":545,"line_end":545,"column_start":27,"column_end":32},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":254},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86055,"byte_end":86060,"line_start":577,"line_end":577,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":254},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":86898,"byte_end":86905,"line_start":608,"line_end":608,"column_start":30,"column_end":37},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":272},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87430,"byte_end":87437,"line_start":630,"line_end":630,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":272},"to":{"krate":1,"index":2564}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":87705,"byte_end":87712,"line_start":642,"line_end":642,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":272},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":88172,"byte_end":88184,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1066},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89418,"byte_end":89426,"line_start":708,"line_end":708,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":296},"to":{"krate":1,"index":2564}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89595,"byte_end":89603,"line_start":717,"line_end":717,"column_start":27,"column_end":35},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":296},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":89990,"byte_end":89998,"line_start":737,"line_end":737,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":296},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":90631,"byte_end":90636,"line_start":762,"line_end":762,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":314},"to":{"krate":1,"index":2564}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91000,"byte_end":91005,"line_start":783,"line_end":783,"column_start":24,"column_end":29},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":314},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":91138,"byte_end":91143,"line_start":790,"line_end":790,"column_start":22,"column_end":27},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":314},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92352,"byte_end":92364,"line_start":834,"line_end":834,"column_start":31,"column_end":43},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":334},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":92701,"byte_end":92713,"line_start":847,"line_end":847,"column_start":29,"column_end":41},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":334},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":93812,"byte_end":93821,"line_start":889,"line_end":889,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1082},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":94691,"byte_end":94696,"line_start":923,"line_end":923,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1736},"to":{"krate":0,"index":358}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95130,"byte_end":95147,"line_start":940,"line_end":940,"column_start":25,"column_end":42},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1092},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95399,"byte_end":95416,"line_start":956,"line_end":956,"column_start":21,"column_end":38},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1098},"to":{"krate":1,"index":2618}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":95534,"byte_end":95551,"line_start":962,"line_end":962,"column_start":32,"column_end":49},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1098},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":98912,"byte_end":98919,"line_start":1077,"line_end":1077,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1176},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":100493,"byte_end":100503,"line_start":1133,"line_end":1133,"column_start":34,"column_end":44},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":396},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":101794,"byte_end":101803,"line_start":1184,"line_end":1184,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":412},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":102292,"byte_end":102301,"line_start":1206,"line_end":1206,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":412},"to":{"krate":1,"index":4232}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":103139,"byte_end":103145,"line_start":1238,"line_end":1238,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":428},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104011,"byte_end":104017,"line_start":1274,"line_end":1274,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":428},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,97,100,97,112,116,111,114,115,47,109,111,100,46,114,115],"byte_start":104123,"byte_end":104129,"line_start":1280,"line_end":1280,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":428},"to":{"krate":1,"index":4232}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,99,111,110,115,95,116,117,112,108,101,115,95,105,109,112,108,46,114,115],"byte_start":118584,"byte_end":118594,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1290},"to":{"krate":1,"index":2564}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":123040,"byte_end":123050,"line_start":49,"line_end":49,"column_start":33,"column_end":43},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":528},"to":{"krate":1,"index":7734}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,102,111,114,109,97,116,46,114,115],"byte_start":123799,"byte_end":123805,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":1296},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,105,110,116,101,114,115,112,101,114,115,101,46,114,115],"byte_start":125774,"byte_end":125785,"line_start":35,"line_end":35,"column_start":22,"column_end":33},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1338},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":127574,"byte_end":127585,"line_start":34,"line_end":34,"column_start":30,"column_end":41},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":578},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,101,114,103,101,95,106,111,105,110,46,114,115],"byte_start":127810,"byte_end":127821,"line_start":43,"line_end":43,"column_start":28,"column_end":39},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":578},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,109,105,110,109,97,120,46,114,115],"byte_start":129694,"byte_end":129706,"line_start":17,"line_end":17,"column_start":16,"column_end":28},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":133891,"byte_end":133899,"line_start":32,"line_end":32,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":134662,"byte_end":134670,"line_start":63,"line_end":63,"column_start":36,"column_end":44},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":4232}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,97,100,95,116,97,105,108,46,114,115],"byte_start":135127,"byte_end":135135,"line_start":80,"line_end":80,"column_start":34,"column_end":42},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1368},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":135717,"byte_end":135725,"line_start":15,"line_end":15,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3826},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":136031,"byte_end":136039,"line_start":23,"line_end":23,"column_start":25,"column_end":33},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":1,"index":40854},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":136359,"byte_end":136366,"line_start":38,"line_end":38,"column_start":25,"column_end":32},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1024},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":137746,"byte_end":137762,"line_start":97,"line_end":97,"column_start":29,"column_end":45},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":638},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":138850,"byte_end":138854,"line_start":135,"line_end":135,"column_start":48,"column_end":52},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":1,"index":5852},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":138906,"byte_end":138911,"line_start":136,"line_end":136,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":1,"index":41494},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":138960,"byte_end":138971,"line_start":137,"line_end":137,"column_start":43,"column_end":54},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":1,"index":41504},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139020,"byte_end":139025,"line_start":138,"line_end":138,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":1,"index":41514},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139080,"byte_end":139084,"line_start":139,"line_end":139,"column_start":49,"column_end":53},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":1,"index":40980},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139142,"byte_end":139146,"line_start":140,"line_end":140,"column_start":49,"column_end":53},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":1,"index":41084},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139198,"byte_end":139203,"line_start":141,"line_end":141,"column_start":43,"column_end":48},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":1,"index":4132},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,101,101,107,105,110,103,95,116,97,107,101,95,119,104,105,108,101,46,114,115],"byte_start":139612,"byte_end":139615,"line_start":149,"line_end":149,"column_start":39,"column_end":42},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":1,"index":40756},"to":{"krate":0,"index":626}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,112,114,111,99,101,115,115,95,114,101,115,117,108,116,115,95,105,109,112,108,46,114,115],"byte_start":140043,"byte_end":140057,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":1406},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":142767,"byte_end":142774,"line_start":23,"line_end":23,"column_start":22,"column_end":29},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":143164,"byte_end":143171,"line_start":43,"line_end":43,"column_start":33,"column_end":40},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":4232}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,114,101,112,101,97,116,110,46,114,115],"byte_start":143321,"byte_end":143328,"line_start":52,"line_end":52,"column_start":31,"column_end":38},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1412},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":146226,"byte_end":146236,"line_start":12,"line_end":12,"column_start":24,"column_end":34},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":710},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":147010,"byte_end":147020,"line_start":45,"line_end":45,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":710},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":148689,"byte_end":148695,"line_start":106,"line_end":106,"column_start":28,"column_end":34},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1422},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149082,"byte_end":149088,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1422},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149777,"byte_end":149784,"line_start":150,"line_end":150,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":1428},"to":{"krate":1,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,115,111,117,114,99,101,115,46,114,115],"byte_start":149887,"byte_end":149894,"line_start":156,"line_end":156,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":1428},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":150986,"byte_end":150997,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":1436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":151170,"byte_end":151181,"line_start":28,"line_end":28,"column_start":22,"column_end":33},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1436},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":151847,"byte_end":151858,"line_start":56,"line_end":56,"column_start":31,"column_end":42},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1436},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":152507,"byte_end":152513,"line_start":84,"line_end":84,"column_start":25,"column_end":31},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":766},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":152725,"byte_end":152731,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":766},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":154338,"byte_end":154350,"line_start":153,"line_end":153,"column_start":25,"column_end":37},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1442},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,116,117,112,108,101,95,105,109,112,108,46,114,115],"byte_start":154876,"byte_end":154881,"line_start":174,"line_end":174,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1736},"to":{"krate":0,"index":790}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":158824,"byte_end":158832,"line_start":42,"line_end":42,"column_start":9,"column_end":17},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":159111,"byte_end":159123,"line_start":54,"line_end":54,"column_start":32,"column_end":44},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":814},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,119,105,116,104,95,112,111,115,105,116,105,111,110,46,114,115],"byte_start":160359,"byte_end":160371,"line_start":88,"line_end":88,"column_start":31,"column_end":43},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":814},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":161289,"byte_end":161294,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1530},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,101,113,95,105,109,112,108,46,114,115],"byte_start":161872,"byte_end":161877,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1530},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":162799,"byte_end":162809,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":1540},"to":{"krate":1,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":163431,"byte_end":163441,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1540},"to":{"krate":1,"index":4232}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,122,105,112,95,108,111,110,103,101,115,116,46,114,115],"byte_start":164262,"byte_end":164272,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1540},"to":{"krate":1,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8117,"byte_end":8125,"line_start":283,"line_end":283,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":3826},"to":{"krate":0,"index":892}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":66537,"byte_end":66538,"line_start":1988,"line_end":1988,"column_start":31,"column_end":32},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":873},"to":{"krate":0,"index":892}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,105,116,101,114,116,111,111,108,115,45,48,46,55,46,56,47,115,114,99,47,108,105,98,46,114,115],"byte_start":70042,"byte_end":70051,"line_start":2106,"line_end":2106,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1672},"to":{"krate":4294967295,"index":4294967295}}]}