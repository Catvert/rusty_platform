{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"xdg","disambiguator":[5107194364535232125,7456489665785803895]},"crate_root":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src","external_crates":[{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[586888675125581807,12572034361373176338]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12032660577259018450,5860902972173545957]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17283673789807926844,10899266201186168850]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7209638829484234959,7348912525526220562]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[15888596596650928603,6243607547058991239]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9262530440471434819,15119842321168113469]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8397006570897917279,2645299033720271436]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[5051683374107945620,18198315276515804711]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[8734470468795703344,10654493516337126768]}}],"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":31670,"line_start":1,"line_end":793,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":31670,"line_start":1,"line_end":793,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xdg-2.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":146},{"krate":0,"index":152},{"krate":0,"index":148},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":156},{"krate":0,"index":162},{"krate":0,"index":158},{"krate":0,"index":56},{"krate":0,"index":60},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":64},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":144}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(unix)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":13,"line_start":1,"line_end":1,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2506,"byte_end":2521,"line_start":71,"line_end":71,"column_start":12,"column_end":27},"name":"BaseDirectories","qualname":"::BaseDirectories","value":"BaseDirectories {  }","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109}],"decl_id":null,"docs":" BaseDirectories allows to look up paths to configuration, data,\n cache and runtime files in well-known locations according to\n the [X Desktop Group Base Directory specification][xdg-basedir].\n [xdg-basedir]: http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2761,"byte_end":2781,"line_start":82,"line_end":82,"column_start":12,"column_end":32},"name":"BaseDirectoriesError","qualname":"::BaseDirectoriesError","value":"BaseDirectoriesError {  }","parent":null,"children":[{"krate":0,"index":19}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6587,"byte_end":6590,"line_start":192,"line_end":192,"column_start":12,"column_end":15},"name":"new","qualname":"<BaseDirectories>::new","value":"fn () -> Result<BaseDirectories, BaseDirectoriesError>","parent":null,"children":[],"decl_id":null,"docs":" Reads the process environment, determines the XDG base directories,\n and returns a value that can be used for lookup.\n The following environment variables are examined:","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6849,"byte_end":6860,"line_start":198,"line_end":198,"column_start":12,"column_end":23},"name":"with_prefix","qualname":"<BaseDirectories>::with_prefix","value":"fn <P> (prefix: P) -> Result<BaseDirectories, BaseDirectoriesError>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`new()`](#method.new), but `prefix` is implicitly prepended to\n every path that is looked up.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7757,"byte_end":7769,"line_start":220,"line_end":220,"column_start":12,"column_end":24},"name":"with_profile","qualname":"<BaseDirectories>::with_profile","value":"fn <P1, P2> (prefix: P1, profile: P2) -> Result<BaseDirectories, BaseDirectoriesError>","parent":null,"children":[],"decl_id":null,"docs":" Same as [`with_prefix()`](#method.with_prefix),\n with `profile` also implicitly prepended to every path that is looked up,\n but only for user-specific directories.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11694,"byte_end":11715,"line_start":312,"line_end":312,"column_start":12,"column_end":33},"name":"has_runtime_directory","qualname":"<BaseDirectories>::has_runtime_directory","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `XDG_RUNTIME_DIR` is available, `false` otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12111,"byte_end":12128,"line_start":323,"line_end":323,"column_start":12,"column_end":29},"name":"place_config_file","qualname":"<BaseDirectories>::place_config_file","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, returns an absolute path in\n `XDG_CONFIG_HOME` where a configuration file may be stored.\n Leading directories in the returned path are pre-created;\n if that is not possible, an error is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12404,"byte_end":12419,"line_start":330,"line_end":330,"column_start":12,"column_end":27},"name":"place_data_file","qualname":"<BaseDirectories>::place_data_file","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`place_config_file()`](#method.place_config_file), but for\n a data file in `XDG_DATA_HOME`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12695,"byte_end":12711,"line_start":337,"line_end":337,"column_start":12,"column_end":28},"name":"place_cache_file","qualname":"<BaseDirectories>::place_cache_file","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`place_config_file()`](#method.place_config_file), but for\n a cache file in `XDG_CACHE_HOME`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13056,"byte_end":13074,"line_start":345,"line_end":345,"column_start":12,"column_end":30},"name":"place_runtime_file","qualname":"<BaseDirectories>::place_runtime_file","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`place_config_file()`](#method.place_config_file), but for\n a runtime file in `XDG_RUNTIME_DIR`.\n If `XDG_RUNTIME_DIR` is not available, returns an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13434,"byte_end":13450,"line_start":353,"line_end":353,"column_start":12,"column_end":28},"name":"find_config_file","qualname":"<BaseDirectories>::find_config_file","value":"fn <P> (&self, path: P) -> Option<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, returns an absolute path to an existing\n configuration file, or `None`. Searches `XDG_CONFIG_HOME` and then\n `XDG_CONFIG_DIRS`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13847,"byte_end":13861,"line_start":362,"line_end":362,"column_start":12,"column_end":26},"name":"find_data_file","qualname":"<BaseDirectories>::find_data_file","value":"fn <P> (&self, path: P) -> Option<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, returns an absolute path to an existing\n configuration file, or `None`. Searches `XDG_DATA_HOME` and then\n `XDG_DATA_DIRS`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14222,"byte_end":14237,"line_start":370,"line_end":370,"column_start":12,"column_end":27},"name":"find_cache_file","qualname":"<BaseDirectories>::find_cache_file","value":"fn <P> (&self, path: P) -> Option<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, returns an absolute path to an existing\n configuration file, or `None`. Searches `XDG_CACHE_HOME`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14653,"byte_end":14670,"line_start":379,"line_end":379,"column_start":12,"column_end":29},"name":"find_runtime_file","qualname":"<BaseDirectories>::find_runtime_file","value":"fn <P> (&self, path: P) -> Option<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, returns an absolute path to an existing\n runtime file, or `None`. Searches `XDG_RUNTIME_DIR`.\n If `XDG_RUNTIME_DIR` is not available, returns `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15263,"byte_end":15286,"line_start":393,"line_end":393,"column_start":12,"column_end":35},"name":"create_config_directory","qualname":"<BaseDirectories>::create_config_directory","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, returns an absolute path to a configuration\n directory in `XDG_CONFIG_HOME`. The directory and all directories\n leading to it are created if they did not exist;\n if that is not possible, an error is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15610,"byte_end":15631,"line_start":401,"line_end":401,"column_start":12,"column_end":33},"name":"create_data_directory","qualname":"<BaseDirectories>::create_data_directory","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`create_config_directory()`](#method.create_config_directory),\n but for a data directory in `XDG_DATA_HOME`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15955,"byte_end":15977,"line_start":409,"line_end":409,"column_start":12,"column_end":34},"name":"create_cache_directory","qualname":"<BaseDirectories>::create_cache_directory","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`create_config_directory()`](#method.create_config_directory),\n but for a cache directory in `XDG_CACHE_HOME`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16370,"byte_end":16394,"line_start":418,"line_end":418,"column_start":12,"column_end":36},"name":"create_runtime_directory","qualname":"<BaseDirectories>::create_runtime_directory","value":"fn <P> (&self, path: P) -> io::Result<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`create_config_directory()`](#method.create_config_directory),\n but for a runtime directory in `XDG_RUNTIME_DIR`.\n If `XDG_RUNTIME_DIR` is not available, returns an error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16768,"byte_end":16785,"line_start":427,"line_end":427,"column_start":12,"column_end":29},"name":"list_config_files","qualname":"<BaseDirectories>::list_config_files","value":"fn <P> (&self, path: P) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, list absolute paths to all files\n in directories with path `path` in `XDG_CONFIG_HOME` and\n `XDG_CONFIG_DIRS`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17145,"byte_end":17167,"line_start":435,"line_end":435,"column_start":12,"column_end":34},"name":"list_config_files_once","qualname":"<BaseDirectories>::list_config_files_once","value":"fn <P> (&self, path: P) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`list_config_files`](#method.list_config_files), but\n only the first occurence of every distinct filename is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17557,"byte_end":17572,"line_start":444,"line_end":444,"column_start":12,"column_end":27},"name":"list_data_files","qualname":"<BaseDirectories>::list_data_files","value":"fn <P> (&self, path: P) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, lists absolute paths to all files\n in directories with path `path` in `XDG_DATA_HOME` and\n `XDG_DATA_DIRS`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17924,"byte_end":17944,"line_start":452,"line_end":452,"column_start":12,"column_end":32},"name":"list_data_files_once","qualname":"<BaseDirectories>::list_data_files_once","value":"fn <P> (&self, path: P) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Like [`list_data_files`](#method.list_data_files), but\n only the first occurence of every distinct filename is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18303,"byte_end":18319,"line_start":460,"line_end":460,"column_start":12,"column_end":28},"name":"list_cache_files","qualname":"<BaseDirectories>::list_cache_files","value":"fn <P> (&self, path: P) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, lists absolute paths to all files\n in directories with path `path` in `XDG_CACHE_HOME`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18737,"byte_end":18755,"line_start":469,"line_end":469,"column_start":12,"column_end":30},"name":"list_runtime_files","qualname":"<BaseDirectories>::list_runtime_files","value":"fn <P> (&self, path: P) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Given a relative path `path`, lists absolute paths to all files\n in directories with path `path` in `XDG_RUNTIME_DIR`.\n If `XDG_RUNTIME_DIR` is not available, returns an empty `Vec`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19160,"byte_end":19173,"line_start":480,"line_end":480,"column_start":12,"column_end":25},"name":"get_data_home","qualname":"<BaseDirectories>::get_data_home","value":"fn (&self) -> PathBuf","parent":null,"children":[],"decl_id":null,"docs":" Returns the user-specific data directory (set by `XDG_DATA_HOME`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19353,"byte_end":19368,"line_start":486,"line_end":486,"column_start":12,"column_end":27},"name":"get_config_home","qualname":"<BaseDirectories>::get_config_home","value":"fn (&self) -> PathBuf","parent":null,"children":[],"decl_id":null,"docs":" Returns the user-specific configuration directory (set by\n `XDG_CONFIG_HOME`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19567,"byte_end":19581,"line_start":492,"line_end":492,"column_start":12,"column_end":26},"name":"get_cache_home","qualname":"<BaseDirectories>::get_cache_home","value":"fn (&self) -> PathBuf","parent":null,"children":[],"decl_id":null,"docs":" Returns the user-specific directory for non-essential (cached) data\n (set by `XDG_CACHE_HOME`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19839,"byte_end":19852,"line_start":499,"line_end":499,"column_start":12,"column_end":25},"name":"get_data_dirs","qualname":"<BaseDirectories>::get_data_dirs","value":"fn (&self) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Returns a preference ordered (preferred to less preferred) list of\n supplementary data directories, ordered by preference (set by\n `XDG_DATA_DIRS`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20124,"byte_end":20139,"line_start":505,"line_end":505,"column_start":12,"column_end":27},"name":"get_config_dirs","qualname":"<BaseDirectories>::get_config_dirs","value":"fn (&self) -> Vec<PathBuf>","parent":null,"children":[],"decl_id":null,"docs":" Returns a preference ordered (preferred to less preferred) list of\n supplementary configuration directories (set by `XDG_CONFIG_DIRS`).\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2828,"byte_end":2848,"line_start":86,"line_end":86,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3014,"byte_end":3034,"line_start":94,"line_end":94,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3152,"byte_end":3172,"line_start":100,"line_end":100,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3820,"byte_end":3840,"line_start":120,"line_end":120,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4655,"byte_end":4660,"line_start":139,"line_end":139,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5010,"byte_end":5021,"line_start":153,"line_end":153,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5182,"byte_end":5193,"line_start":160,"line_end":160,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5497,"byte_end":5512,"line_start":174,"line_end":174,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2828,"byte_end":2848,"line_start":86,"line_end":86,"column_start":6,"column_end":26},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3014,"byte_end":3034,"line_start":94,"line_end":94,"column_start":21,"column_end":41},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":32},"to":{"krate":2,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3152,"byte_end":3172,"line_start":100,"line_end":100,"column_start":23,"column_end":43},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":32},"to":{"krate":1,"index":2400}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3820,"byte_end":3840,"line_start":120,"line_end":120,"column_start":23,"column_end":43},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":32},"to":{"krate":2,"index":7734}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4655,"byte_end":4660,"line_start":139,"line_end":139,"column_start":50,"column_end":55},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":1,"index":3746},"to":{"krate":2,"index":2618}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5010,"byte_end":5021,"line_start":153,"line_end":153,"column_start":21,"column_end":32},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":156},"to":{"krate":2,"index":7730}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5182,"byte_end":5193,"line_start":160,"line_end":160,"column_start":23,"column_end":34},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":156},"to":{"krate":2,"index":7734}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,100,103,45,50,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5497,"byte_end":5512,"line_start":174,"line_end":174,"column_start":6,"column_end":21},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":146},"to":{"krate":4294967295,"index":4294967295}}]}