{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"hound","disambiguator":[8586941554589433597,2707800708868699674]},"crate_root":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src","external_crates":[{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[586888675125581807,12572034361373176338]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12032660577259018450,5860902972173545957]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17283673789807926844,10899266201186168850]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7209638829484234959,7348912525526220562]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[15888596596650928603,6243607547058991239]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9262530440471434819,15119842321168113469]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8397006570897917279,2645299033720271436]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[5051683374107945620,18198315276515804711]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[8734470468795703344,10654493516337126768]}}],"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":631,"byte_end":26075,"line_start":13,"line_end":792,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2082,"byte_end":2091,"line_start":68,"line_end":68,"column_start":16,"column_end":25},"alias_span":null,"name":"WavReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2093,"byte_end":2107,"line_start":68,"line_end":68,"column_start":27,"column_end":41},"alias_span":null,"name":"WavIntoSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2109,"byte_end":2119,"line_start":68,"line_end":68,"column_start":43,"column_end":53},"alias_span":null,"name":"WavSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2121,"byte_end":2137,"line_start":68,"line_end":68,"column_start":55,"column_end":71},"alias_span":null,"name":"read_wave_header","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2156,"byte_end":2170,"line_start":69,"line_end":69,"column_start":17,"column_end":31},"alias_span":null,"name":"SampleWriter16","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2172,"byte_end":2181,"line_start":69,"line_end":69,"column_start":33,"column_end":42},"alias_span":null,"name":"WavWriter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":631,"byte_end":26075,"line_start":13,"line_end":792,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/hound-3.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":174},{"krate":0,"index":306},{"krate":0,"index":316},{"krate":0,"index":322},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":338},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":352},{"krate":0,"index":360},{"krate":0,"index":368},{"krate":0,"index":404},{"krate":0,"index":420},{"krate":0,"index":418},{"krate":0,"index":414},{"krate":0,"index":410},{"krate":0,"index":406},{"krate":0,"index":424},{"krate":0,"index":442},{"krate":0,"index":440},{"krate":0,"index":436},{"krate":0,"index":430},{"krate":0,"index":426},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":376},{"krate":0,"index":380},{"krate":0,"index":386},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394}],"decl_id":null,"docs":" Hound, a wav encoding and decoding library.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1920,"byte_end":1942,"line_start":56,"line_end":56,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":33536,"byte_end":33545,"line_start":216,"line_end":216,"column_start":12,"column_end":21},"name":"WavReader","qualname":"::read::WavReader","value":"WavReader {  }","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63}],"decl_id":null,"docs":" A reader that reads the WAVE format from the underlying reader.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":34379,"byte_end":34389,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"WavSamples","qualname":"::read::WavSamples","value":"WavSamples {  }","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":73}],"decl_id":null,"docs":" An iterator that yields samples of type `S` read from a `WavReader`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":34727,"byte_end":34741,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"WavIntoSamples","qualname":"::read::WavIntoSamples","value":"WavIntoSamples {  }","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":81}],"decl_id":null,"docs":" An iterator that yields samples of type `S` read from a `WavReader`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":35216,"byte_end":35232,"line_start":265,"line_end":265,"column_start":8,"column_end":24},"name":"read_wave_header","qualname":"::read::read_wave_header","value":"fn <R> (reader: &mut R) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Reads the RIFF WAVE header, returns the supposed file size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":49175,"byte_end":49178,"line_start":598,"line_end":598,"column_start":12,"column_end":15},"name":"new","qualname":"<WavReader<R>>::new","value":"fn (mut reader: R) -> Result<WavReader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to create a reader that reads the WAVE format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":50607,"byte_end":50611,"line_start":633,"line_end":633,"column_start":12,"column_end":16},"name":"spec","qualname":"<WavReader<R>>::spec","value":"fn (&self) -> WavSpec","parent":null,"children":[],"decl_id":null,"docs":" Returns information about the WAVE file.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":51526,"byte_end":51533,"line_start":652,"line_end":652,"column_start":12,"column_end":19},"name":"samples","qualname":"<WavReader<R>>::samples","value":"fn <'wr, S> (&'wr mut self) -> WavSamples<'wr, R, S>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all samples.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":51830,"byte_end":51842,"line_start":662,"line_end":662,"column_start":12,"column_end":24},"name":"into_samples","qualname":"<WavReader<R>>::into_samples","value":"fn <S> (self) -> WavIntoSamples<R, S>","parent":null,"children":[],"decl_id":null,"docs":" Same as `samples`, but takes ownership of the `WavReader`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":52355,"byte_end":52363,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"duration","qualname":"<WavReader<R>>::duration","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration of the file in samples.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":52793,"byte_end":52796,"line_start":685,"line_end":685,"column_start":12,"column_end":15},"name":"len","qualname":"<WavReader<R>>::len","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of values that the sample iterator will yield.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":52924,"byte_end":52934,"line_start":690,"line_end":690,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<WavReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Destroys the `WavReader` and returns the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":53579,"byte_end":53583,"line_start":704,"line_end":704,"column_start":12,"column_end":16},"name":"seek","qualname":"<WavReader<R>>::seek","value":"fn (&mut self, time: u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Seek to the given time within the file.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":54343,"byte_end":54347,"line_start":722,"line_end":722,"column_start":12,"column_end":16},"name":"open","qualname":"<WavReader<io::BufReader<fs::File>>>::open","value":"fn <P> (filename: P) -> Result<WavReader<io::BufReader<fs::File>>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to create a reader that reads from the specified file.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":75995,"byte_end":76004,"line_start":136,"line_end":136,"column_start":12,"column_end":21},"name":"WavWriter","qualname":"::write::WavWriter","value":"WavWriter {  }","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153}],"decl_id":null,"docs":" A writer that accepts samples and writes the WAVE format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":77530,"byte_end":77533,"line_start":185,"line_end":185,"column_start":12,"column_end":15},"name":"new","qualname":"<WavWriter<W>>::new","value":"fn (writer: W, spec: WavSpec) -> Result<WavWriter<W>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that writes the WAVE format to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":85410,"byte_end":85422,"line_start":385,"line_end":385,"column_start":12,"column_end":24},"name":"write_sample","qualname":"<WavWriter<W>>::write_sample","value":"fn <S> (&mut self, sample: S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Writes a single sample for one channel.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":85389,"byte_end":85398,"line_start":384,"line_end":384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":86399,"byte_end":86413,"line_start":406,"line_end":406,"column_start":12,"column_end":26},"name":"get_i16_writer","qualname":"<WavWriter<W>>::get_i16_writer","value":"fn <'s> (&'s mut self, num_samples: u32) -> SampleWriter16<'s, W>","parent":null,"children":[],"decl_id":null,"docs":" Create an efficient writer that writes 16-bit integer samples only.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":89685,"byte_end":89690,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"flush","qualname":"<WavWriter<W>>::flush","value":"fn (&mut self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Updates the WAVE header and flushes the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":90266,"byte_end":90274,"line_start":492,"line_end":492,"column_start":12,"column_end":20},"name":"finalize","qualname":"<WavWriter<W>>::finalize","value":"fn (mut self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Updates the WAVE header (which requires knowing all samples).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":91006,"byte_end":91010,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"spec","qualname":"<WavWriter<W>>::spec","value":"fn (&self) -> WavSpec","parent":null,"children":[],"decl_id":null,"docs":" Returns information about the WAVE file being written.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":91344,"byte_end":91352,"line_start":518,"line_end":518,"column_start":12,"column_end":20},"name":"duration","qualname":"<WavWriter<W>>::duration","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the duration of the file written so far, in samples.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":91652,"byte_end":91655,"line_start":526,"line_end":526,"column_start":12,"column_end":15},"name":"len","qualname":"<WavWriter<W>>::len","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of samples in the file written so far.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":94112,"byte_end":94118,"line_start":597,"line_end":597,"column_start":12,"column_end":18},"name":"create","qualname":"<WavWriter<io::BufWriter<fs::File>>>::create","value":"fn <P> (filename: P, spec: WavSpec) -> Result<WavWriter<io::BufWriter<fs::File>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that writes the WAVE format to a file.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":94847,"byte_end":94853,"line_start":612,"line_end":612,"column_start":12,"column_end":18},"name":"append","qualname":"<WavWriter<io::BufWriter<fs::File>>>::append","value":"fn <P> (filename: P) -> Result<WavWriter<io::BufWriter<fs::File>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that appends samples to an existing file.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":96681,"byte_end":96691,"line_start":654,"line_end":654,"column_start":12,"column_end":22},"name":"new_append","qualname":"<WavWriter<W>>::new_append","value":"fn (mut writer: W) -> Result<WavWriter<W>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a writer that appends samples to an existing file stream.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":98128,"byte_end":98142,"line_start":688,"line_end":688,"column_start":12,"column_end":26},"name":"SampleWriter16","qualname":"::write::SampleWriter16","value":"SampleWriter16 {  }","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187}],"decl_id":null,"docs":" A writer that specifically only writes integer samples of 16 bits per sample.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":99366,"byte_end":99378,"line_start":717,"line_end":717,"column_start":12,"column_end":24},"name":"write_sample","qualname":"<SampleWriter16<'parent, W>>::write_sample","value":"fn <S> (&mut self, sample: S) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Writes a single sample for one channel.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":99337,"byte_end":99354,"line_start":716,"line_end":716,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":100924,"byte_end":100946,"line_start":754,"line_end":754,"column_start":19,"column_end":41},"name":"write_sample_unchecked","qualname":"<SampleWriter16<'parent, W>>::write_sample_unchecked","value":"fn <S> (&mut self, sample: S) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Like `write_sample()`, but does not perform a bounds check when writing\n to the internal buffer.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":100888,"byte_end":100905,"line_start":753,"line_end":753,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":101321,"byte_end":101326,"line_start":765,"line_end":765,"column_start":12,"column_end":17},"name":"flush","qualname":"<SampleWriter16<'parent, W>>::flush","value":"fn (self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the internal buffer to the underlying writer.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2599,"byte_end":2605,"line_start":79,"line_end":79,"column_start":11,"column_end":17},"name":"Sample","qualname":"::Sample","value":"Sample: Sized","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328}],"decl_id":null,"docs":" A type that can be used to represent audio samples.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2678,"byte_end":2683,"line_start":81,"line_end":81,"column_start":8,"column_end":13},"name":"write","qualname":"::Sample::write","value":"fn <W> (self, writer: &mut W, bits: u16) -> Result<()>","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Writes the audio sample to the WAVE data chunk.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2811,"byte_end":2815,"line_start":84,"line_end":84,"column_start":8,"column_end":12},"name":"read","qualname":"::Sample::read","value":"fn <R> (reader: &mut R, SampleFormat, bytes: u16, bits: u16) -> Result<Self>","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Reads the audio sample from the WAVE data chunk.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3137,"byte_end":3143,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"as_i16","qualname":"::Sample::as_i16","value":"fn (self) -> i16","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Cast the sample to a 16-bit sample.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":233},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9824,"byte_end":9829,"line_start":298,"line_end":298,"column_start":5,"column_end":10},"name":"Float","qualname":"::SampleFormat::Float","value":"SampleFormat::Float","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Wave files with the `WAVE_FORMAT_IEEE_FLOAT` format tag store samples as floating point\n values.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":235},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9925,"byte_end":9928,"line_start":300,"line_end":300,"column_start":5,"column_end":8},"name":"Int","qualname":"::SampleFormat::Int","value":"SampleFormat::Int","parent":{"krate":0,"index":404},"children":[],"decl_id":null,"docs":" Wave files with the `WAVE_FORMAT_PCM` format tag store samples as integer values.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":404},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9631,"byte_end":9643,"line_start":293,"line_end":293,"column_start":10,"column_end":22},"name":"SampleFormat","qualname":"::SampleFormat","value":"SampleFormat::{Float, Int}","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":235}],"decl_id":null,"docs":" Specifies whether a sample is stored as an \"IEEE Float\" or an integer.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9622,"byte_end":9931,"line_start":293,"line_end":301,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9622,"byte_end":9931,"line_start":293,"line_end":301,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":424},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10033,"byte_end":10040,"line_start":305,"line_end":305,"column_start":12,"column_end":19},"name":"WavSpec","qualname":"::WavSpec","value":"WavSpec { channels, sample_rate, bits_per_sample, sample_format }","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243}],"decl_id":null,"docs":" Specifies properties of the audio data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10022,"byte_end":10507,"line_start":305,"line_end":321,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10022,"byte_end":10507,"line_start":305,"line_end":321,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":237},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10083,"byte_end":10091,"line_start":307,"line_end":307,"column_start":9,"column_end":17},"name":"channels","qualname":"::WavSpec::channels","value":"u16","parent":{"krate":0,"index":424},"children":[],"decl_id":null,"docs":" The number of channels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":239},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10235,"byte_end":10246,"line_start":312,"line_end":312,"column_start":9,"column_end":20},"name":"sample_rate","qualname":"::WavSpec::sample_rate","value":"u32","parent":{"krate":0,"index":424},"children":[],"decl_id":null,"docs":" The number of samples per second.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":241},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10383,"byte_end":10398,"line_start":317,"line_end":317,"column_start":9,"column_end":24},"name":"bits_per_sample","qualname":"::WavSpec::bits_per_sample","value":"u16","parent":{"krate":0,"index":424},"children":[],"decl_id":null,"docs":" The number of bits per sample.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":243},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10477,"byte_end":10490,"line_start":320,"line_end":320,"column_start":9,"column_end":22},"name":"sample_format","qualname":"::WavSpec::sample_format","value":"SampleFormat","parent":{"krate":0,"index":424},"children":[],"decl_id":null,"docs":" Whether the wav's samples are float or integer values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":245},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10677,"byte_end":10684,"line_start":327,"line_end":327,"column_start":5,"column_end":12},"name":"IoError","qualname":"::Error::IoError","value":"Error::IoError(io::Error)","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" An IO error occured in the underlying reader or writer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":249},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10747,"byte_end":10758,"line_start":329,"line_end":329,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::Error::FormatError","value":"Error::FormatError(&'static str)","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" Ill-formed WAVE data was encountered.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":253},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11152,"byte_end":11159,"line_start":336,"line_end":336,"column_start":5,"column_end":12},"name":"TooWide","qualname":"::Error::TooWide","value":"Error::TooWide","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" The sample has more bits than the destination type.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11248,"byte_end":11264,"line_start":338,"line_end":338,"column_start":5,"column_end":21},"name":"UnfinishedSample","qualname":"::Error::UnfinishedSample","value":"Error::UnfinishedSample","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" The number of samples written is not a multiple of the number of channels.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":257},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11307,"byte_end":11318,"line_start":340,"line_end":340,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::Error::Unsupported","value":"Error::Unsupported","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" The format is not supported.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":259},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11809,"byte_end":11828,"line_start":350,"line_end":350,"column_start":5,"column_end":24},"name":"InvalidSampleFormat","qualname":"::Error::InvalidSampleFormat","value":"Error::InvalidSampleFormat","parent":{"krate":0,"index":446},"children":[],"decl_id":null,"docs":" The sample format is different than the destination format.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":446},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10601,"byte_end":10606,"line_start":325,"line_end":325,"column_start":10,"column_end":15},"name":"Error","qualname":"::Error","value":"Error::{IoError, FormatError, TooWide, UnfinishedSample, Unsupported, InvalidSampleFormat}","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":249},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":259}],"decl_id":null,"docs":" The error type for operations on `WavReader` and `WavWriter`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":390},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13974,"byte_end":13980,"line_start":409,"line_end":409,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type for results generated by Hound where the error type is hard-wired.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":28933,"byte_end":28934,"line_start":70,"line_end":70,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":38294,"byte_end":38303,"line_start":334,"line_end":334,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":54075,"byte_end":54084,"line_start":717,"line_end":717,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":55314,"byte_end":55324,"line_start":750,"line_end":750,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":55634,"byte_end":55644,"line_start":765,"line_end":765,"column_start":39,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":55728,"byte_end":55742,"line_start":771,"line_end":771,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":56042,"byte_end":56056,"line_start":786,"line_end":786,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":73490,"byte_end":73491,"line_start":55,"line_end":55,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":77014,"byte_end":77023,"line_start":173,"line_end":173,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":91761,"byte_end":91770,"line_start":531,"line_end":531,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":93798,"byte_end":93807,"line_start":591,"line_end":591,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":95971,"byte_end":95980,"line_start":641,"line_end":641,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":98635,"byte_end":98649,"line_start":702,"line_end":702,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":302},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11855,"byte_end":11860,"line_start":353,"line_end":353,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12856,"byte_end":12861,"line_start":378,"line_end":378,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13803,"byte_end":13808,"line_start":402,"line_end":402,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":27018,"byte_end":27022,"line_start":24,"line_end":24,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":4264},"to":{"krate":0,"index":44}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":28933,"byte_end":28934,"line_start":70,"line_end":70,"column_start":21,"column_end":22},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":19},"to":{"krate":0,"index":44}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":38294,"byte_end":38303,"line_start":334,"line_end":334,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":54075,"byte_end":54084,"line_start":717,"line_end":717,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":100},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":55314,"byte_end":55324,"line_start":750,"line_end":750,"column_start":30,"column_end":40},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":102},"to":{"krate":2,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":55634,"byte_end":55644,"line_start":765,"line_end":765,"column_start":39,"column_end":49},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":102},"to":{"krate":2,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":55728,"byte_end":55742,"line_start":771,"line_end":771,"column_start":25,"column_end":39},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":104},"to":{"krate":2,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":56042,"byte_end":56056,"line_start":786,"line_end":786,"column_start":34,"column_end":48},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":104},"to":{"krate":2,"index":4246}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":72369,"byte_end":72374,"line_start":25,"line_end":25,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":4296},"to":{"krate":0,"index":206}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":73490,"byte_end":73491,"line_start":55,"line_end":55,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":127},"to":{"krate":0,"index":206}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":77014,"byte_end":77023,"line_start":173,"line_end":173,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":91761,"byte_end":91770,"line_start":531,"line_end":531,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":244},"to":{"krate":2,"index":1998}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":93798,"byte_end":93807,"line_start":591,"line_end":591,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":95971,"byte_end":95980,"line_start":641,"line_end":641,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":98635,"byte_end":98649,"line_start":702,"line_end":702,"column_start":40,"column_end":54},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2607,"byte_end":2612,"line_start":79,"line_end":79,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1736},"to":{"krate":0,"index":322}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11855,"byte_end":11860,"line_start":353,"line_end":353,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":446},"to":{"krate":2,"index":7734}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12856,"byte_end":12861,"line_start":378,"line_end":378,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":446},"to":{"krate":1,"index":2400}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,104,111,117,110,100,45,51,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13803,"byte_end":13808,"line_start":402,"line_end":402,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":446},"to":{"krate":2,"index":2618}}]}