{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"xi_unicode","disambiguator":[12140574109756940828,7033775485016751085]},"crate_root":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src","external_crates":[{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[586888675125581807,12572034361373176338]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12032660577259018450,5860902972173545957]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17283673789807926844,10899266201186168850]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7209638829484234959,7348912525526220562]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[15888596596650928603,6243607547058991239]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9262530440471434819,15119842321168113469]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8397006570897917279,2645299033720271436]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[5051683374107945620,18198315276515804711]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[8734470468795703344,10654493516337126768]}}],"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":610,"byte_end":25296,"line_start":15,"line_end":515,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":610,"byte_end":25296,"line_start":15,"line_end":515,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/xi-unicode-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":50},{"krate":0,"index":56},{"krate":0,"index":52},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":58},{"krate":0,"index":64},{"krate":0,"index":60},{"krate":0,"index":40},{"krate":0,"index":44}],"decl_id":null,"docs":" Unicode utilities useful for text editing, including a line breaking iterator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":730,"byte_end":748,"line_start":21,"line_end":21,"column_start":8,"column_end":26},"name":"linebreak_property","qualname":"::linebreak_property","value":"fn (cp: char) -> u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1295,"byte_end":1317,"line_start":37,"line_end":37,"column_start":8,"column_end":30},"name":"linebreak_property_str","qualname":"::linebreak_property_str","value":"fn (s: &str, ix: usize) -> (u8, usize)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2573,"byte_end":2590,"line_start":64,"line_end":64,"column_start":12,"column_end":29},"name":"LineBreakIterator","qualname":"::LineBreakIterator","value":"LineBreakIterator {  }","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43}],"decl_id":null,"docs":" An iterator which produces line breaks according to the UAX 14 line\n breaking algorithm. For each break, return a tuple consisting of the offset\n within the source string and a bool indicating whether it's a hard break.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2562,"byte_end":2644,"line_start":64,"line_end":68,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3816,"byte_end":3819,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"new","qualname":"<LineBreakIterator<'a>>::new","value":"fn (s: &str) -> LineBreakIterator","parent":null,"children":[],"decl_id":null,"docs":" Create a new iterator for the given string slice.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4865,"byte_end":4882,"line_start":129,"line_end":129,"column_start":12,"column_end":29},"name":"LineBreakLeafIter","qualname":"::LineBreakLeafIter","value":"LineBreakLeafIter {  }","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" A class (TODO, not right word) useful for computing line breaks in a rope or\n other non-contiguous string representation. This is a trickier problem than\n iterating in a string for a few reasons, the trickiest of which is that in\n the general case, line breaks require an indeterminate amount of look-behind.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4854,"byte_end":4916,"line_start":129,"line_end":132,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5401,"byte_end":5404,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"new","qualname":"<LineBreakLeafIter>::new","value":"fn (s: &str, ix: usize) -> LineBreakLeafIter","parent":null,"children":[],"decl_id":null,"docs":" Create a new line break iterator suitable for leaves in a rope.\n Precondition: ix references a codepoint in s (implies s is not empty).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6250,"byte_end":6254,"line_start":166,"line_end":166,"column_start":12,"column_end":16},"name":"next","qualname":"<LineBreakLeafIter>::next","value":"fn (&mut self, s: &str) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Return break pos and whether it's a hard break. Note: hard break\n indication may go away, this may not be useful in actual application.\n If end of leaf is found, return leaf's len. This does not indicate\n a break, as that requires at least one more codepoint of context.\n If it is a break, then subsequent next call will return an offset of\n 0. EOT is always a break, so in the EOT case it's up to the caller\n to figure that out.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2668,"byte_end":2685,"line_start":70,"line_end":70,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3723,"byte_end":3740,"line_start":100,"line_end":100,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4935,"byte_end":4952,"line_start":134,"line_end":134,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5219,"byte_end":5236,"line_start":145,"line_end":145,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2668,"byte_end":2685,"line_start":70,"line_end":70,"column_start":23,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":50},"to":{"krate":2,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3723,"byte_end":3740,"line_start":100,"line_end":100,"column_start":10,"column_end":27},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4935,"byte_end":4952,"line_start":134,"line_end":134,"column_start":18,"column_end":35},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":58},"to":{"krate":2,"index":2598}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,120,105,45,117,110,105,99,111,100,101,45,48,46,49,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5219,"byte_end":5236,"line_start":145,"line_end":145,"column_start":6,"column_end":23},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}}]}