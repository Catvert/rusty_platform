{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"claxon","disambiguator":[9131418524074567896,10322220963744168621]},"crate_root":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src","external_crates":[{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[586888675125581807,12572034361373176338]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12032660577259018450,5860902972173545957]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17283673789807926844,10899266201186168850]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7209638829484234959,7348912525526220562]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[15888596596650928603,6243607547058991239]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[9262530440471434819,15119842321168113469]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8397006570897917279,2645299033720271436]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[5051683374107945620,18198315276515804711]}},{"file_name":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[8734470468795703344,10654493516337126768]}}],"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":295,"byte_end":10371,"line_start":8,"line_end":286,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2266,"byte_end":2271,"line_start":77,"line_end":77,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2273,"byte_end":2279,"line_start":77,"line_end":77,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2297,"byte_end":2302,"line_start":78,"line_end":78,"column_start":16,"column_end":21},"alias_span":null,"name":"Block","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":295,"byte_end":10371,"line_start":8,"line_end":286,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":24},{"krate":0,"index":32},{"krate":0,"index":82},{"krate":0,"index":158},{"krate":0,"index":200},{"krate":0,"index":284},{"krate":0,"index":332},{"krate":0,"index":374},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":392},{"krate":0,"index":404},{"krate":0,"index":408}],"decl_id":null,"docs":" Claxon, a FLAC decoding library.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1939,"byte_end":1961,"line_start":59,"line_end":59,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":19520,"byte_end":19534,"line_start":17,"line_end":17,"column_start":12,"column_end":26},"name":"BufferedReader","qualname":"::input::BufferedReader","value":"BufferedReader {  }","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":51}],"decl_id":null,"docs":" Similar to `std::io::BufRead`, but more performant.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":19967,"byte_end":19970,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedReader<R>>::new","value":"fn (inner: R) -> BufferedReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Wrap the reader in a new buffered reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":20324,"byte_end":20334,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BufferedReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Destroys the buffered reader, returning the wrapped reader.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":20451,"byte_end":20460,"line_start":54,"line_end":54,"column_start":11,"column_end":20},"name":"ReadBytes","qualname":"::input::ReadBytes","value":"ReadBytes","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112}],"decl_id":null,"docs":" Provides convenience methods to make input less cumbersome.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":20515,"byte_end":20522,"line_start":56,"line_end":56,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::input::ReadBytes::read_u8","value":"fn (&mut self) -> io::Result<u8>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Reads a single byte, failing on EOF.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":20610,"byte_end":20624,"line_start":59,"line_end":59,"column_start":8,"column_end":22},"name":"read_u8_or_eof","qualname":"::input::ReadBytes::read_u8_or_eof","value":"fn (&mut self) -> io::Result<Option<u8>>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Reads a single byte, not failing on EOF.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":20720,"byte_end":20729,"line_start":62,"line_end":62,"column_start":8,"column_end":17},"name":"read_into","qualname":"::input::ReadBytes::read_into","value":"fn (&mut self, buffer: &mut [u8]) -> io::Result<()>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Reads until the provided buffer is full.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":20923,"byte_end":20927,"line_start":67,"line_end":67,"column_start":8,"column_end":12},"name":"skip","qualname":"::input::ReadBytes::skip","value":"fn (&mut self, amount: u32) -> io::Result<()>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Skips over the specified number of bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":21064,"byte_end":21075,"line_start":70,"line_end":70,"column_start":8,"column_end":19},"name":"read_be_u16","qualname":"::input::ReadBytes::read_be_u16","value":"fn (&mut self) -> io::Result<u16>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Reads two bytes and interprets them as a big-endian 16-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":21324,"byte_end":21342,"line_start":77,"line_end":77,"column_start":8,"column_end":26},"name":"read_be_u16_or_eof","qualname":"::input::ReadBytes::read_be_u16_or_eof","value":"fn (&mut self) -> io::Result<Option<u16>>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Reads two bytes and interprets them as a big-endian 16-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":21706,"byte_end":21717,"line_start":87,"line_end":87,"column_start":8,"column_end":19},"name":"read_be_u24","qualname":"::input::ReadBytes::read_be_u24","value":"fn (&mut self) -> io::Result<u32>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Reads three bytes and interprets them as a big-endian 24-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":22024,"byte_end":22035,"line_start":95,"line_end":95,"column_start":8,"column_end":19},"name":"read_be_u32","qualname":"::input::ReadBytes::read_be_u32","value":"fn (&mut self) -> io::Result<u32>","parent":{"krate":0,"index":96},"children":[],"decl_id":null,"docs":" Reads four bytes and interprets them as a big-endian 32-bit unsigned integer.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":28259,"byte_end":28268,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"Bitstream","qualname":"::input::Bitstream","value":"Bitstream {  }","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67}],"decl_id":null,"docs":" Wraps a `Reader` to facilitate reading that is not byte-aligned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":28637,"byte_end":28640,"line_start":290,"line_end":290,"column_start":12,"column_end":15},"name":"new","qualname":"<Bitstream<R>>::new","value":"fn (reader: R) -> Bitstream<R>","parent":null,"children":[],"decl_id":null,"docs":" Wraps the reader with a reader that facilitates reading individual bits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":29202,"byte_end":29210,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"read_bit","qualname":"<Bitstream<R>>::read_bit","value":"fn (&mut self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Reads a single bit.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":29173,"byte_end":29190,"line_start":310,"line_end":310,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":30209,"byte_end":30219,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"read_unary","qualname":"<Bitstream<R>>::read_unary","value":"fn (&mut self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Reads bits until a 1 is read, and returns the number of zeros read.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":30180,"byte_end":30197,"line_start":338,"line_end":338,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":31928,"byte_end":31939,"line_start":379,"line_end":379,"column_start":12,"column_end":23},"name":"read_leq_u8","qualname":"<Bitstream<R>>::read_leq_u8","value":"fn (&mut self, bits: u32) -> io::Result<u8>","parent":null,"children":[],"decl_id":null,"docs":" Reads at most eight bits.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":31899,"byte_end":31916,"line_start":378,"line_end":378,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":33838,"byte_end":33856,"line_start":426,"line_end":426,"column_start":12,"column_end":30},"name":"read_gt_u8_leq_u16","qualname":"<Bitstream<R>>::read_gt_u8_leq_u16","value":"fn (&mut self, bits: u32) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Read n bits, where 8 < n <= 16.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":33809,"byte_end":33826,"line_start":425,"line_end":425,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":35674,"byte_end":35686,"line_start":470,"line_end":470,"column_start":12,"column_end":24},"name":"read_leq_u16","qualname":"<Bitstream<R>>::read_leq_u16","value":"fn (&mut self, bits: u32) -> io::Result<u16>","parent":null,"children":[],"decl_id":null,"docs":" Reads at most 16 bits.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":35645,"byte_end":35662,"line_start":469,"line_end":469,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":36442,"byte_end":36454,"line_start":490,"line_end":490,"column_start":12,"column_end":24},"name":"read_leq_u32","qualname":"<Bitstream<R>>::read_leq_u32","value":"fn (&mut self, bits: u32) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Reads at most 32 bits.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":36413,"byte_end":36430,"line_start":489,"line_end":489,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":217},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":43389,"byte_end":43396,"line_start":19,"line_end":19,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::Error::IoError","value":"Error::IoError(io::Error)","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" Not a decoding error, but a problem with the underlying IO.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":221},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":43465,"byte_end":43476,"line_start":22,"line_end":22,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::error::Error::FormatError","value":"Error::FormatError(&'static str)","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" An ill-formed FLAC stream was encountered.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":225},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":43603,"byte_end":43610,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"TooWide","qualname":"::error::Error::TooWide","value":"Error::TooWide","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" The audio stream has more bits per sample than the provided sample\n buffer to decode into.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":227},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":43980,"byte_end":43991,"line_start":34,"line_end":34,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::Error::Unsupported","value":"Error::Unsupported(&'static str)","parent":{"krate":0,"index":414},"children":[],"decl_id":null,"docs":" A currently unsupported feature of the FLAC format was encountered.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":414},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":43309,"byte_end":43314,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{IoError, FormatError, TooWide, Unsupported}","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":221},{"krate":0,"index":225},{"krate":0,"index":227}],"decl_id":null,"docs":" An error that prevents succesful decoding of the FLAC stream.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":46207,"byte_end":46213,"line_start":100,"line_end":100,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type for results generated by Claxon where the error type is hard-wired.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"frame","qualname":"::frame","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/frame.rs","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":210},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":420},{"krate":0,"index":424},{"krate":0,"index":422},{"krate":0,"index":428},{"krate":0,"index":432},{"krate":0,"index":430},{"krate":0,"index":436},{"krate":0,"index":444},{"krate":0,"index":442},{"krate":0,"index":438},{"krate":0,"index":448},{"krate":0,"index":452},{"krate":0,"index":450},{"krate":0,"index":226},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278}],"decl_id":null,"docs":" The `frame` module deals with the frames that make up a FLAC stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":61153,"byte_end":61158,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Block","qualname":"::frame::Block","value":"Block {  }","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85}],"decl_id":null,"docs":" A block of raw audio samples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":61789,"byte_end":61794,"line_start":415,"line_end":415,"column_start":12,"column_end":17},"name":"empty","qualname":"<Block>::empty","value":"fn () -> Block","parent":null,"children":[],"decl_id":null,"docs":" Returns a block with 0 channels and 0 samples.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":62051,"byte_end":62055,"line_start":425,"line_end":425,"column_start":12,"column_end":16},"name":"time","qualname":"<Block>::time","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the sample number of the first sample in the block.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":62283,"byte_end":62286,"line_start":433,"line_end":433,"column_start":12,"column_end":15},"name":"len","qualname":"<Block>::len","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of samples in this block.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":62254,"byte_end":62271,"line_start":432,"line_end":432,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":62837,"byte_end":62845,"line_start":446,"line_end":446,"column_start":12,"column_end":20},"name":"duration","qualname":"<Block>::duration","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of inter-channel samples in the block.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":62808,"byte_end":62825,"line_start":445,"line_end":445,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":63129,"byte_end":63137,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"channels","qualname":"<Block>::channels","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of channels in the block.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":63100,"byte_end":63117,"line_start":453,"line_end":453,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":63348,"byte_end":63355,"line_start":464,"line_end":464,"column_start":12,"column_end":19},"name":"channel","qualname":"<Block>::channel","value":"fn (&self, ch: u32) -> &[i32]","parent":null,"children":[],"decl_id":null,"docs":" Returns the (zero-based) `ch`-th channel as a slice.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":63319,"byte_end":63336,"line_start":463,"line_end":463,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":63915,"byte_end":63921,"line_start":481,"line_end":481,"column_start":12,"column_end":18},"name":"sample","qualname":"<Block>::sample","value":"fn (&self, ch: u32, sample: u32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns a sample in this block.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":63886,"byte_end":63903,"line_start":480,"line_end":480,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":64324,"byte_end":64335,"line_start":490,"line_end":490,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Block>::into_buffer","value":"fn (self) -> Vec<i32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying buffer that stores the samples in this block.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":64716,"byte_end":64730,"line_start":503,"line_end":503,"column_start":12,"column_end":26},"name":"stereo_samples","qualname":"<Block>::stereo_samples","value":"fn <'a> (&'a self) -> StereoSamples<'a>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that produces left and right channel samples.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":64695,"byte_end":64704,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":65598,"byte_end":65611,"line_start":535,"line_end":535,"column_start":12,"column_end":25},"name":"StereoSamples","qualname":"::frame::StereoSamples","value":"StereoSamples {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95}],"decl_id":null,"docs":" An iterator over the stereo sample pairs in a block.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":67302,"byte_end":67313,"line_start":590,"line_end":590,"column_start":12,"column_end":23},"name":"FrameReader","qualname":"::frame::FrameReader","value":"FrameReader {  }","parent":null,"children":[{"krate":0,"index":101}],"decl_id":null,"docs":" Reads frames from a stream and exposes decoded blocks as an iterator.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":67447,"byte_end":67458,"line_start":596,"line_end":596,"column_start":10,"column_end":21},"name":"FrameResult","qualname":"::frame::FrameResult","value":"Result<Option<Block>>","parent":null,"children":[],"decl_id":null,"docs":" Either a `Block` or an `Error`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":68655,"byte_end":68658,"line_start":623,"line_end":623,"column_start":12,"column_end":15},"name":"new","qualname":"<FrameReader<R>>::new","value":"fn (input: R) -> FrameReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new frame reader that will yield at least one element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":69269,"byte_end":69285,"line_start":638,"line_end":638,"column_start":12,"column_end":28},"name":"read_next_or_eof","qualname":"<FrameReader<R>>::read_next_or_eof","value":"fn (&mut self, mut buffer: Vec<i32>) -> FrameResult","parent":null,"children":[],"decl_id":null,"docs":" Decodes the next frame or returns an error if the data was invalid.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,115,117,98,102,114,97,109,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"subframe","qualname":"::subframe","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/subframe.rs","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":298},{"krate":0,"index":456},{"krate":0,"index":464},{"krate":0,"index":462},{"krate":0,"index":458},{"krate":0,"index":468},{"krate":0,"index":472},{"krate":0,"index":470},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":476},{"krate":0,"index":482},{"krate":0,"index":478},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330}],"decl_id":null,"docs":" The `subframe` module deals with subframes that make up a frame of the FLAC stream.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,115,117,98,102,114,97,109,101,46,114,115],"byte_start":78080,"byte_end":78095,"line_start":117,"line_end":117,"column_start":8,"column_end":23},"name":"extend_sign_u32","qualname":"::subframe::extend_sign_u32","value":"fn (val: u32, bits: u32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Given a signed two's complement integer in the `bits` least significant\n bits of `val`, extends the sign bit to a valid 32-bit signed integer.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,115,117,98,102,114,97,109,101,46,114,115],"byte_start":78055,"byte_end":78072,"line_start":116,"line_end":116,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,115,117,98,102,114,97,109,101,46,114,115],"byte_start":80268,"byte_end":80274,"line_start":184,"line_end":184,"column_start":8,"column_end":14},"name":"decode","qualname":"::subframe::decode","value":"fn <R> (input: &mut Bitstream<R>, bps: u32, buffer: &mut [i32]) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a subframe into the provided block-size buffer.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"metadata","qualname":"::metadata","value":"/home/finch/.cargo/registry/src/github.com-1ecc6299db9ec823/claxon-0.3.1/src/metadata.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":340},{"krate":0,"index":484},{"krate":0,"index":488},{"krate":0,"index":486},{"krate":0,"index":492},{"krate":0,"index":500},{"krate":0,"index":498},{"krate":0,"index":494},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":506},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":366}],"decl_id":null,"docs":" The `metadata` module deals with metadata at the beginning of a FLAC stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101203,"byte_end":101213,"line_start":22,"line_end":22,"column_start":12,"column_end":22},"name":"StreamInfo","qualname":"::metadata::StreamInfo","value":"StreamInfo { min_block_size, max_block_size, min_frame_size, max_frame_size, sample_rate, channels, bits_per_sample, samples, md5sum }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":303},{"krate":0,"index":305}],"decl_id":null,"docs":" The streaminfo metadata block, with important information about the stream.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101192,"byte_end":102022,"line_start":22,"line_end":43,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":289},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101356,"byte_end":101370,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"name":"min_block_size","qualname":"::metadata::StreamInfo::min_block_size","value":"u16","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The minimum block size (in samples) used in the stream.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":291},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101449,"byte_end":101463,"line_start":28,"line_end":28,"column_start":9,"column_end":23},"name":"max_block_size","qualname":"::metadata::StreamInfo::max_block_size","value":"u16","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The maximum block size (in samples) used in the stream.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":293},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101540,"byte_end":101554,"line_start":30,"line_end":30,"column_start":9,"column_end":23},"name":"min_frame_size","qualname":"::metadata::StreamInfo::min_frame_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The minimum frame size (in bytes) used in the stream.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":295},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101639,"byte_end":101653,"line_start":32,"line_end":32,"column_start":9,"column_end":23},"name":"max_frame_size","qualname":"::metadata::StreamInfo::max_frame_size","value":"std::option::Option<u32>","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The maximum frame size (in bytes) used in the stream.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":297},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101707,"byte_end":101718,"line_start":34,"line_end":34,"column_start":9,"column_end":20},"name":"sample_rate","qualname":"::metadata::StreamInfo::sample_rate","value":"u32","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The sample rate in Hz.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":299},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101765,"byte_end":101773,"line_start":36,"line_end":36,"column_start":9,"column_end":17},"name":"channels","qualname":"::metadata::StreamInfo::channels","value":"u32","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The number of channels.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":301},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101827,"byte_end":101842,"line_start":38,"line_end":38,"column_start":9,"column_end":24},"name":"bits_per_sample","qualname":"::metadata::StreamInfo::bits_per_sample","value":"u32","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The number of bits per sample.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":303},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":101922,"byte_end":101929,"line_start":40,"line_end":40,"column_start":9,"column_end":16},"name":"samples","qualname":"::metadata::StreamInfo::samples","value":"std::option::Option<u64>","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" The total number of inter-channel samples in the stream.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":305},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102003,"byte_end":102009,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"name":"md5sum","qualname":"::metadata::StreamInfo::md5sum","value":"[u8; _]","parent":{"krate":0,"index":492},"children":[],"decl_id":null,"docs":" MD5 signature of the unencoded audio data.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102094,"byte_end":102103,"line_start":47,"line_end":47,"column_start":12,"column_end":21},"name":"SeekPoint","qualname":"::metadata::SeekPoint","value":"SeekPoint { sample, offset, samples }","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315}],"decl_id":null,"docs":" A seek point in the seek table.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102083,"byte_end":102438,"line_start":47,"line_end":55,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":311},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102208,"byte_end":102214,"line_start":49,"line_end":49,"column_start":9,"column_end":15},"name":"sample","qualname":"::metadata::SeekPoint::sample","value":"u64","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Sample number of the first sample in the target frame, or 2^64 - 1 for a placeholder.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":313},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102355,"byte_end":102361,"line_start":52,"line_end":52,"column_start":9,"column_end":15},"name":"offset","qualname":"::metadata::SeekPoint::offset","value":"u64","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Offset in bytes from the first byte of the first frame header to the first byte of the\n target frame's header.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":315},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102423,"byte_end":102430,"line_start":54,"line_end":54,"column_start":9,"column_end":16},"name":"samples","qualname":"::metadata::SeekPoint::samples","value":"u16","parent":{"krate":0,"index":504},"children":[],"decl_id":null,"docs":" Number of samples in the target frame.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":342},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102498,"byte_end":102507,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"SeekTable","qualname":"::metadata::SeekTable","value":"SeekTable {  }","parent":null,"children":[{"krate":0,"index":135}],"decl_id":null,"docs":" A seek table to aid seeking in the stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":137},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102762,"byte_end":102772,"line_start":67,"line_end":67,"column_start":5,"column_end":15},"name":"StreamInfo","qualname":"::metadata::MetadataBlock::StreamInfo","value":"MetadataBlock::StreamInfo(StreamInfo)","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A stream info block.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":141},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102841,"byte_end":102848,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Padding","qualname":"::metadata::MetadataBlock::Padding","value":"MetadataBlock::Padding { length }","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A padding block (with no meaningful data).\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":145},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102985,"byte_end":102996,"line_start":74,"line_end":74,"column_start":5,"column_end":16},"name":"Application","qualname":"::metadata::MetadataBlock::Application","value":"MetadataBlock::Application { id, data }","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" An application block with application-specific data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":151},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":103172,"byte_end":103181,"line_start":81,"line_end":81,"column_start":5,"column_end":14},"name":"SeekTable","qualname":"::metadata::MetadataBlock::SeekTable","value":"MetadataBlock::SeekTable(SeekTable)","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A seek table block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":155},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":103255,"byte_end":103268,"line_start":83,"line_end":83,"column_start":5,"column_end":18},"name":"VorbisComment","qualname":"::metadata::MetadataBlock::VorbisComment","value":"MetadataBlock::VorbisComment","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A Vorbis comment block, also known as FLAC tags.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":157},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":103309,"byte_end":103317,"line_start":85,"line_end":85,"column_start":5,"column_end":13},"name":"CueSheet","qualname":"::metadata::MetadataBlock::CueSheet","value":"MetadataBlock::CueSheet","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A CUE sheet block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":159},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":103356,"byte_end":103363,"line_start":87,"line_end":87,"column_start":5,"column_end":12},"name":"Picture","qualname":"::metadata::MetadataBlock::Picture","value":"MetadataBlock::Picture","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A picture block.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":161},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":103452,"byte_end":103460,"line_start":89,"line_end":89,"column_start":5,"column_end":13},"name":"Reserved","qualname":"::metadata::MetadataBlock::Reserved","value":"MetadataBlock::Reserved","parent":{"krate":0,"index":344},"children":[],"decl_id":null,"docs":" A block with a reserved block type, not supported by this library.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":344},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":102713,"byte_end":102726,"line_start":65,"line_end":65,"column_start":10,"column_end":23},"name":"MetadataBlock","qualname":"::metadata::MetadataBlock","value":"MetadataBlock::{StreamInfo, Padding, Application, SeekTable, VorbisComment, CueSheet, Picture, Reserved}","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":145},{"krate":0,"index":151},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161}],"decl_id":null,"docs":" A metadata about the flac stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":356},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":111082,"byte_end":111101,"line_start":287,"line_end":287,"column_start":12,"column_end":31},"name":"MetadataBlockReader","qualname":"::metadata::MetadataBlockReader","value":"MetadataBlockReader {  }","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179}],"decl_id":null,"docs":" Reads metadata blocks from a stream and exposes them as an iterator.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":111204,"byte_end":111223,"line_start":293,"line_end":293,"column_start":10,"column_end":29},"name":"MetadataBlockResult","qualname":"::metadata::MetadataBlockResult","value":"Result<MetadataBlock>","parent":null,"children":[],"decl_id":null,"docs":" Either a `MetadataBlock` or an `Error`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":111383,"byte_end":111386,"line_start":297,"line_end":297,"column_start":12,"column_end":15},"name":"new","qualname":"<MetadataBlockReader<R>>::new","value":"fn (input: R) -> MetadataBlockReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a metadata block reader that will yield at least one element.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2420,"byte_end":2430,"line_start":83,"line_end":83,"column_start":12,"column_end":22},"name":"FlacReader","qualname":"::FlacReader","value":"FlacReader {  }","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191}],"decl_id":null,"docs":" A FLAC decoder that can decode the stream from the underlying reader.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2678,"byte_end":2689,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"FlacSamples","qualname":"::FlacSamples","value":"FlacSamples {  }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":203}],"decl_id":null,"docs":" An iterator that yields samples read from a `FlacReader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3939,"byte_end":3942,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<FlacReader<R>>::new","value":"fn (reader: R) -> Result<FlacReader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to create a reader that reads the FLAC format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5726,"byte_end":5736,"line_start":174,"line_end":174,"column_start":12,"column_end":22},"name":"streaminfo","qualname":"<FlacReader<R>>::streaminfo","value":"fn (&self) -> StreamInfo","parent":null,"children":[],"decl_id":null,"docs":" Returns the streaminfo metadata.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6156,"byte_end":6162,"line_start":184,"line_end":184,"column_start":12,"column_end":18},"name":"blocks","qualname":"<FlacReader<R>>::blocks","value":"fn <'r> (&'r mut self) -> FrameReader<&'r mut BufferedReader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that decodes a single frame on every iteration.\n TODO: It is not an iterator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7556,"byte_end":7563,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"samples","qualname":"<FlacReader<R>>::samples","value":"fn <'r> (&'r mut self) -> FlacSamples<&'r mut BufferedReader<R>>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all samples.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8035,"byte_end":8045,"line_start":222,"line_end":222,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FlacReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Destroys the FLAC reader and returns the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8436,"byte_end":8440,"line_start":233,"line_end":233,"column_start":12,"column_end":16},"name":"open","qualname":"<FlacReader<fs::File>>::open","value":"fn <P> (filename: P) -> Result<FlacReader<fs::File>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to create a reader that reads from the specified file.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":15083,"byte_end":15093,"line_start":75,"line_end":75,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":15561,"byte_end":15572,"line_start":95,"line_end":95,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":16092,"byte_end":16102,"line_start":115,"line_end":115,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":17008,"byte_end":17019,"line_start":147,"line_end":147,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":19885,"byte_end":19899,"line_start":31,"line_end":31,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":22340,"byte_end":22354,"line_start":104,"line_end":104,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":28530,"byte_end":28539,"line_start":288,"line_end":288,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":44029,"byte_end":44034,"line_start":37,"line_end":37,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":44549,"byte_end":44554,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":45415,"byte_end":45420,"line_start":73,"line_end":73,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":46035,"byte_end":46040,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":47688,"byte_end":47699,"line_start":50,"line_end":50,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":61479,"byte_end":61484,"line_start":404,"line_end":404,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":65716,"byte_end":65729,"line_start":541,"line_end":541,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":68554,"byte_end":68565,"line_start":621,"line_end":621,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":111269,"byte_end":111288,"line_start":295,"line_end":295,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":111841,"byte_end":111860,"line_start":312,"line_end":312,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3734,"byte_end":3744,"line_start":125,"line_end":125,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8105,"byte_end":8115,"line_start":227,"line_end":227,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8632,"byte_end":8643,"line_start":239,"line_end":239,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2206,"byte_end":2211,"line_start":73,"line_end":73,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":200}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2221,"byte_end":2229,"line_start":74,"line_end":74,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":284}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2239,"byte_end":2247,"line_start":75,"line_end":75,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":332}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":15083,"byte_end":15093,"line_start":75,"line_end":75,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":15561,"byte_end":15572,"line_start":95,"line_end":95,"column_start":20,"column_end":31},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":44},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":16092,"byte_end":16102,"line_start":115,"line_end":115,"column_start":34,"column_end":44},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":42},"to":{"krate":0,"index":96}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":17008,"byte_end":17019,"line_start":147,"line_end":147,"column_start":34,"column_end":45},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":44},"to":{"krate":0,"index":96}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":19885,"byte_end":19899,"line_start":31,"line_end":31,"column_start":19,"column_end":33},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":22340,"byte_end":22354,"line_start":104,"line_end":104,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":88},"to":{"krate":0,"index":96}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,105,110,112,117,116,46,114,115],"byte_start":28530,"byte_end":28539,"line_start":288,"line_end":288,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":138},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":44029,"byte_end":44034,"line_start":37,"line_end":37,"column_start":20,"column_end":25},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2376}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":44549,"byte_end":44554,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":414},"to":{"krate":2,"index":7734}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":45415,"byte_end":45420,"line_start":73,"line_end":73,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":414},"to":{"krate":1,"index":2400}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":46035,"byte_end":46040,"line_start":93,"line_end":93,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2618}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":47688,"byte_end":47699,"line_start":50,"line_end":50,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":61479,"byte_end":61484,"line_start":404,"line_end":404,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":65716,"byte_end":65729,"line_start":541,"line_end":541,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":264},"to":{"krate":2,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":68554,"byte_end":68565,"line_start":621,"line_end":621,"column_start":20,"column_end":31},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":111269,"byte_end":111288,"line_start":295,"line_end":295,"column_start":20,"column_end":39},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":356},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,109,101,116,97,100,97,116,97,46,114,115],"byte_start":111841,"byte_end":111860,"line_start":312,"line_end":312,"column_start":33,"column_end":52},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":356},"to":{"krate":2,"index":3826}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3734,"byte_end":3744,"line_start":125,"line_end":125,"column_start":19,"column_end":29},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8105,"byte_end":8115,"line_start":227,"line_end":227,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,102,105,110,99,104,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,108,97,120,111,110,45,48,46,51,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8632,"byte_end":8643,"line_start":239,"line_end":239,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":384},"to":{"krate":2,"index":3826}}]}